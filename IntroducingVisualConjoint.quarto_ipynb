{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "# Replication Code for Images in \"Introducing Visual Conjoint Experiments\", Vecchiato(2021)\n",
        "\n",
        "This replication code allows for the creation of all the Twitter profiles used for the visual conjoint experiment in Vecchiato and Munger (2021). The code creates empty Twitter profiles that are then modified with the desired features using a nested loop. While the code can be edited freely to allow for different features, the location parameters of the Twitter profile elements, such as likes, retweets, and avatars, should not be changed.\n"
      ],
      "id": "86e4ddd2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Preamble\n",
        "from PIL import Image, ImageDraw, ImageFilter, ImageFont\n",
        "import os\n",
        "import numpy as np\n",
        "import textwrap\n",
        "import re, string"
      ],
      "id": "5cdbc2d9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Local directory\n",
        "script_dir = os.path.abspath('')"
      ],
      "id": "51b69f5d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Loading subfolders\n",
        "avatars_man = os.listdir(os.path.join(script_dir, \"avatars\", \"man\"))\n",
        "avatars_man.remove('.DS_Store')\n",
        "avatars_woman = os.listdir(os.path.join(script_dir, \"avatars\", \"woman\"))\n",
        "avatars_woman.remove('.DS_Store')\n",
        "\n",
        "top_image = os.listdir(os.path.join(script_dir, \"TopImage\"))\n",
        "\n",
        "#Twitter features. The elements included in the vectors below are those then used to generate the Twitter profiles. \n",
        "#Pay attention to the punctuation included in the 'bio' features to ensure readablity. \n",
        "tweets_dem_local = [\"The Center County Democratic Party is working to ensure that the Planned Parenthood stays open for good.\",\"Congratulations to the Social Justice club at the Center County High; I applaud your efforts to combat racism in our community.\" ] \n",
        "tweets_rep_local = [\"The Center County Republican Party is working to ensure that local businesses can stay open.\", \"Congratulations to the Rifle club at the Center County High; I applaud your efforts to ensure safe and responsible gun use in our community.\"]\n",
        "Feedback = ['high', 'low']\n",
        "Generations = ['boomer', 'millennial']\n",
        "Religion = ['Jewish, ', 'Catholic, ', 'Protestant, ', 'Mormon, ', '']\n",
        "Profession = ['an enterpreneur', 'a lawyer','a doctor', 'a teacher', 'a farmer', 'a car dealer']\n",
        "Education = ['High School graduate', 'College graduate', 'Ivy League graduate']\n",
        "Military = [', I served, ', ' ']\n",
        "\n",
        "white_male_names = [\n",
        "  'James Anderson',\n",
        "  'Michael Thompson',\n",
        "  'Christopher Walker',\n",
        "  'Andrew Peterson',\n",
        "  'William Carter'\n",
        "  ]\n",
        "\n",
        "white_female_names = [\n",
        "  'Emily Johnson',\n",
        "  'Sarah Miller',\n",
        "  'Jessica Brown',\n",
        "  'Ashley Wilson',\n",
        "  'Megan Davis'\n",
        "]\n",
        "\n",
        "\n",
        "\n",
        "black_male_names = [\n",
        "  'Jamal Jackson',\n",
        "  'Malik Robinson',\n",
        "  'Tyrone Johnson',\n",
        "  'Darnell Harris',\n",
        "  'DeAndre Lewis'\n",
        "]\n",
        "\n",
        "black_female_names = [\n",
        "  'Latoya Williams',\n",
        "  'Shanice Taylor',\n",
        "  'Aaliyah Brown',\n",
        "  'Keisha Davis',\n",
        "  'Monique Johnson'\n",
        "]"
      ],
      "id": "c34d81b0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Conjoint Attributes\n"
      ],
      "id": "870622a3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# ---- Names ----\n",
        "\n",
        "white_male_names = [\n",
        "  'James Anderson',\n",
        "  'Michael Thompson',\n",
        "  'Christopher Walker',\n",
        "  'Andrew Peterson',\n",
        "  'William Carter'\n",
        "  ]\n",
        "\n",
        "white_female_names = [\n",
        "  'Emily Johnson',\n",
        "  'Sarah Miller',\n",
        "  'Jessica Brown',\n",
        "  'Ashley Wilson',\n",
        "  'Megan Davis'\n",
        "]\n",
        "\n",
        "\n",
        "\n",
        "black_male_names = [\n",
        "  'Jamal Jackson',\n",
        "  'Malik Robinson',\n",
        "  'Tyrone Johnson',\n",
        "  'Darnell Harris',\n",
        "  'DeAndre Lewis'\n",
        "]\n",
        "\n",
        "black_female_names = [\n",
        "  'Latoya Williams',\n",
        "  'Shanice Taylor',\n",
        "  'Aaliyah Brown',\n",
        "  'Keisha Davis',\n",
        "  'Monique Johnson'\n",
        "]\n",
        "\n",
        "# ---- Twitter Handles ----\n",
        "white_male_twitter = [\n",
        "  '@JamesAnderson',\n",
        "  '@MichaelThompson',\n",
        "  '@ChristopherWalker',\n",
        "  '@AndrewPeterson',\n",
        "  'WilliamCarter'\n",
        "  ]\n",
        "\n",
        "white_female_twitter = [\n",
        "  '@EmilyJohnson',\n",
        "  '@SarahMiller',\n",
        "  '@JessicaBrown',\n",
        "  '@AshleyWilson',\n",
        "  '@MeganDavis'\n",
        "]\n",
        "\n",
        "\n",
        "black_male_twitter = [\n",
        "  '@JamalJackson',\n",
        "  '@MalikRobinson',\n",
        "  '@TyroneJohnson',\n",
        "  '@DarnellHarris',\n",
        "  '@DeAndreLewis'\n",
        "]\n",
        "\n",
        "black_female_twitter = [\n",
        "  '@LatoyaWilliams',\n",
        "  '@ShaniceTaylor',\n",
        "  '@AaliyahBrown',\n",
        "  '@KeishaDavis',\n",
        "  '@MoniqueJohnson'\n",
        "]\n",
        "\n",
        "# Tweets\n",
        "\n",
        "treat_pro_con = ['pro','con']\n",
        "treat_tweet = ['facts','narrative','both']\n",
        "\n",
        "\n",
        "tweet_pro_fact_cashbail = [\"\"\"\n",
        "The U.S. jails over 400,000 people pretrial every day. Why? They can’t afford bail. About 60% of people in jail haven’t been convicted of a crime — they’re just too poor to pay for their freedom. This costs taxpayers $140 billion annually.\\n\n",
        "\n",
        "Cash bail doesn’t improve public safety. States like New Jersey reduced cash bail and saw lower crime rates and fewer people jailed pretrial.\\n \n",
        "\n",
        "No one should lose their job, home, or family because they can’t afford bail. It's time for a fair system based on risk, not wealth. #EndCashBail #BailReform\n",
        "\"\"\",\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "]\n",
        "\n",
        "tweet_con_fact = [\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "]\n",
        "\n",
        "tweet_pro_narrative = [\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "]\n",
        "\n",
        "tweet_con_narrative = [\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "]\n",
        "\n",
        "tweet_pro_both = [\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "]\n",
        "\n",
        "tweet_con_both = [\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "  ' ',\n",
        "]\n",
        "\n",
        "# ----- Biography ----\n",
        "\n",
        "profession = [\n",
        "  'a business owner'\n",
        "  'a researcher',\n",
        "  'an activist',\n",
        "  'an lawyer',\n",
        "  'a scholar'\n",
        "  'a writer'\n",
        "]\n",
        "\n",
        "\n",
        "hashtag_pro = [\n",
        "  '#EndCashBail'\n",
        "  '#BlackLivesMatter'\n",
        "  '#BailReform'\n",
        "]\n",
        "\n",
        "hashtag_con = [\n",
        "  '#RightOnCrime',\n",
        "  '#BlueLivesMatter',\n",
        "  '#TruthInSentencing'\n",
        "]\n"
      ],
      "id": "47e71b6d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Generate Clean Profiles\n"
      ],
      "id": "5045f392"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "for p in range(0,5):\n",
        "  profile = p + 1\n",
        "  name = black_female_names[p]\n",
        "  handle = str('@') + re.sub(\"[ ,]\", \"_\",name)\n",
        "  img = Image.open('Twitter_profile_clean_cwap.png').convert('RGB')\n",
        "  draw = ImageDraw.Draw(img)\n",
        "  font_largeName = ImageFont.truetype(\"HelveticaNeue.ttc\", size=72, index = 1)\n",
        "  draw.text((61, 1079), name, (0,0,0),font=font_largeName)\n",
        "  font_smallName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "  draw.text((61, 1170), handle , font=font_smallName, fill = \"#667786\")\n",
        "  draw.text((2000, 875),\"Follow\",font=font_largeName, fill = \"#1ca1f2\")\n",
        "  font_location = ImageFont.truetype(\"HelveticaNeue.ttc\", 60, index = 1)\n",
        "  draw.text((155, 1480),\"Washington, DC\",font=font_smallName, fill = \"#667786\")\n",
        "  draw.text((1411, 1480),\"Joined November 2010\",font=font_smallName, fill = \"#667786\")\n",
        "  font_tweetName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50, index = 1)\n",
        "  draw.text((295, 1987),name,(0,0,0), font=font_tweetName)\n",
        "  img_name = str(\"TwitterProfileClean_p\") + str(p+1) + '_bw.png' \n",
        "  img.save(os.path.join(script_dir,'clean_profiles', img_name,''), dpi=(300, 300))"
      ],
      "id": "f87fe6ff",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Test Image\n"
      ],
      "id": "3d68f5fc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Again Let's use a black woman\n",
        "\n",
        "generation = \"boomer\"\n",
        "religion = \"Catholic\"\n",
        "education = \"JD\"\n",
        "military = \" \"\n",
        "profession = \"researcher\"\n",
        "feedback = \"high\"\n",
        "avatar = \"p1_larger.png\"\n",
        "\n",
        "im_bg = Image.open(os.path.join(script_dir, 'clean_profiles/TwitterProfileClean_p1_bw.png')).convert('RGB')\n",
        "im_avatar = Image.open(os.path.join(script_dir, 'avatars', 'woman',\"black\" ,\"p1\", 'p1_larger.png'),'r').convert('RGB')\n",
        "mask_im = Image.new(\"L\", im_avatar.size, 0)\n",
        "draw = ImageDraw.Draw(mask_im)\n",
        "draw.ellipse((0, 0, 536, 536), fill=255)\n",
        "mask_im.save('mask_circle.jpg',quality=95)\n",
        "back_im = im_bg.copy()\n",
        "back_im.paste(im_avatar, (62, 502), mask_im)\n",
        "# im_top = Image.open(os.path.join(script_dir, 'TopImage', 'elephant.png')).convert('RGB')\n",
        "# mask_im_top = Image.new(\"L\", im_top.size, 0)\n",
        "# draw = ImageDraw.Draw(mask_im_top)\n",
        "draw.rectangle((0, 0, 2402, 802), fill='#667786')\n",
        "draw.ellipse((50, 486, 615, 1055), fill=0)\n",
        "mask_im_top.save('mask_background.jpg', quality=95)\n",
        "back_im.paste(im_top, (0,0), mask_im_top)\n",
        "im_sm_avatar = Image.open(os.path.join(script_dir, 'avatars', 'woman',\"black\" ,\"p1\", 'p1_smaller.png'),'r').convert('RGB')\n",
        "mask_im_sm_avatar = Image.new(\"L\", im_sm_avatar.size, 0)\n",
        "draw = ImageDraw.Draw(mask_im_sm_avatar)\n",
        "draw.ellipse((0, 0, 196, 196), fill=255)\n",
        "mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)\n",
        "back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)\n",
        "# back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)\n",
        "img = back_im\n",
        "draw = ImageDraw.Draw(img)\n",
        "font_largeName = ImageFont.truetype(\"HelveticaNeue.ttc\", size=72, index = 1)\n",
        "font_smallName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "# if generation == 'boomer':\n",
        "#     year = str(np.random.randint(1940,1975))\n",
        "# else:\n",
        "#     year = str(np.random.randint(1976,1990))\n",
        "description = textwrap.wrap(profession[0] + \"|\" + hashtag_pro[0], width=92)\n",
        "y_text = 1284\n",
        "for line in description:\n",
        "    # width, height = font_smallName.getsize(line)\n",
        "    bbox = font_smallName.getbbox(line)\n",
        "    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]\n",
        "    draw.text((61, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "    y_text += height\n",
        "font_location = ImageFont.truetype(\"HelveticaNeue.ttc\", 60, index = 1)\n",
        "font_tweetName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50, index = 1)\n",
        "font_tweet = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "wrapper = textwrap.TextWrapper(width=85, replace_whitespace=False)\n",
        "# Wrap the text\n",
        "tweet = wrapper.wrap(tweet_pro_fact_cashbail[0])\n",
        "print(tweet)\n",
        "tweet_as_string = \"\\n\".join(tweet)\n",
        "print(tweet_as_string)\n",
        "# tweet = textwrap.TextWrapper(tweet_pro_fact_cashbail[0], width=85, replace_whitespace=False)\n",
        "y_text = 2070\n",
        "for line in tweet:\n",
        "    # width, height = font_tweet.getsize(line)\n",
        "    bbox = font_tweet.getbbox(line)\n",
        "    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]\n",
        "    draw.text((295, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "    y_text += height\n",
        "    height += height\n",
        "    print(y_text)\n",
        "    print(height)\n",
        "    feedback_num = [str(np.random.randint(700,900)),\n",
        "                       str(np.random.randint(10,13)),\n",
        "                       str(np.random.randint(600,900)),\n",
        "                       str(np.random.randint(1500,2000)),\n",
        "                       str(np.random.randint(3000,6000)),\n",
        "                       str(np.random.randint(250,500)),\n",
        "                       str(np.random.randint(1000,1300)),\n",
        "                       str(np.random.randint(3000,6000))]\n",
        "# draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)\n",
        "# draw.text((529, 1582),feedback_num[1] + \"K\",(0,0,0), font = font_location)\n",
        "# draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = \"#667786\")\n",
        "# draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = \"#667786\")\n",
        "draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = \"#667786\")\n",
        "draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = \"#667786\")\n",
        "draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = \"#667786\")\n",
        "draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = \"#667786\")   \n",
        "avatar = avatar.replace(\".png\", \"\")\n",
        "newsize = (480,612)\n",
        "img = img.resize(newsize)\n",
        "img_name = str(avatar) + \"_\" + str(profession[0]) + '.png'\n",
        "img_name = re.sub(\"[ ,]\", \"\", img_name)\n",
        "img.save(os.path.join(script_dir, \"test_result\", img_name), dpi=(300, 300))\n"
      ],
      "id": "5310e630",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Generating empty Twitter profile, man\n",
        "img = Image.open('Twitter_profile_clean.png').convert('RGB')\n",
        "draw = ImageDraw.Draw(img)\n",
        "font_largeName = ImageFont.truetype(\"HelveticaNeue.ttc\", size=72, index = 1)\n",
        "draw.text((61, 1079),\"Congressman Smith\",(0,0,0),font=font_largeName)\n",
        "font_smallName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "draw.text((61, 1170),\"@CongressmanSmith\",font=font_smallName, fill = \"#667786\")\n",
        "draw.text((2000, 875),\"Follow\",font=font_largeName, fill = \"#1ca1f2\")\n",
        "font_location = ImageFont.truetype(\"HelveticaNeue.ttc\", 60, index = 1)\n",
        "draw.text((155, 1480),\"Washington, DC\",font=font_smallName, fill = \"#667786\")\n",
        "draw.text((646, 1480),\"www.congress.gov\",font=font_smallName, fill = \"#667786\")\n",
        "draw.text((1411, 1480),\"Joined November 2010\",font=font_smallName, fill = \"#667786\")\n",
        "font_tweetName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50, index = 1)\n",
        "draw.text((295, 1987),\"Congressman Smith\",(0,0,0), font=font_tweetName)\n",
        "draw.text((295, 2380),\"Congressman Smith\",(0,0,0), font=font_tweetName)\n",
        "img.save(os.path.join(script_dir, \"TwitterProfileClean_man.png\"), dpi=(300, 300))"
      ],
      "id": "0d08d4f7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Generating empty Twitter profile, woman\n",
        "img = Image.open('Twitter_profile_clean.png').convert('RGB')\n",
        "draw = ImageDraw.Draw(img)\n",
        "font_largeName = ImageFont.truetype(\"HelveticaNeue.ttc\", size=72, index = 1)\n",
        "draw.text((61, 1079),\"Congresswoman Smith\",(0,0,0),font=font_largeName)\n",
        "font_smallName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "draw.text((61, 1170),\"@CongresswomanSmith\",font=font_smallName, fill = \"#667786\")\n",
        "draw.text((2000, 875),\"Follow\",font=font_largeName, fill = \"#1ca1f2\")\n",
        "font_location = ImageFont.truetype(\"HelveticaNeue.ttc\", 60, index = 1)\n",
        "draw.text((155, 1480),\"Washington, DC\",font=font_smallName, fill = \"#667786\")\n",
        "draw.text((646, 1480),\"www.congress.gov\",font=font_smallName, fill = \"#667786\")\n",
        "draw.text((1411, 1480),\"Joined November 2010\",font=font_smallName, fill = \"#667786\")\n",
        "font_tweetName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50, index = 1)\n",
        "draw.text((295, 1987),\"Congresswoman Smith\",(0,0,0), font=font_tweetName)\n",
        "draw.text((295, 2380),\"Congresswoman Smith\",(0,0,0), font=font_tweetName)\n",
        "img.save(os.path.join(script_dir, \"TwitterProfileClean_woman.png\"), dpi=(300, 300))"
      ],
      "id": "f037ba03",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create a test profile for a black woman\n",
        "\n",
        "generation = \"boomer\"\n",
        "religion = \"Catholic\"\n",
        "education = \"JD\"\n",
        "military = \" \"\n",
        "profession = \"researcher\"\n",
        "feedback = \"high\"\n",
        "avatar = \"p1_larger.png\"\n",
        "im_bg = Image.open(os.path.join(script_dir, 'TwitterProfileClean_woman.png')).convert('RGB')\n",
        "im_avatar = Image.open(os.path.join(script_dir, 'avatars', 'woman',\"black\" ,\"p1\", 'p1_larger.png'),'r').convert('RGB')\n",
        "mask_im = Image.new(\"L\", im_avatar.size, 0)\n",
        "draw = ImageDraw.Draw(mask_im)\n",
        "draw.ellipse((0, 0, 536, 536), fill=255)\n",
        "mask_im.save('mask_circle.jpg',quality=95)\n",
        "back_im = im_bg.copy()\n",
        "back_im.paste(im_avatar, (62, 502), mask_im)\n",
        "im_top = Image.open(os.path.join(script_dir, 'TopImage', 'elephant.png')).convert('RGB')\n",
        "mask_im_top = Image.new(\"L\", im_top.size, 0)\n",
        "draw = ImageDraw.Draw(mask_im_top)\n",
        "draw.rectangle((0, 0, 2402, 802), fill=255)\n",
        "draw.ellipse((50, 486, 615, 1055), fill=0)\n",
        "mask_im_top.save('mask_background.jpg', quality=95)\n",
        "back_im.paste(im_top, (0,0), mask_im_top)\n",
        "im_sm_avatar = Image.open(os.path.join(script_dir, 'avatars', 'woman',\"black\" ,\"p1\", 'p1_smaller.png'),'r').convert('RGB')\n",
        "mask_im_sm_avatar = Image.new(\"L\", im_sm_avatar.size, 0)\n",
        "draw = ImageDraw.Draw(mask_im_sm_avatar)\n",
        "draw.ellipse((0, 0, 196, 196), fill=255)\n",
        "mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)\n",
        "back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)\n",
        "back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)\n",
        "img = back_im\n",
        "draw = ImageDraw.Draw(img)\n",
        "font_largeName = ImageFont.truetype(\"HelveticaNeue.ttc\", size=72, index = 1)\n",
        "font_smallName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "if generation == 'boomer':\n",
        "    year = str(np.random.randint(1940,1975))\n",
        "else:\n",
        "    year = str(np.random.randint(1976,1990))\n",
        "description = textwrap.wrap(\"I'm a Republican candidate for the House of Representatives. Born in \" + year + \", I'm \" + religion + \"a \" + education + military + \"and currently I am \" + profession + \".\", width=92)\n",
        "y_text = 1284\n",
        "for line in description:\n",
        "    # width, height = font_smallName.getsize(line)\n",
        "    bbox = font_smallName.getbbox(line)\n",
        "    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]\n",
        "    draw.text((61, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "    y_text += height\n",
        "font_location = ImageFont.truetype(\"HelveticaNeue.ttc\", 60, index = 1)\n",
        "font_tweetName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50, index = 1)\n",
        "font_tweet = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "tweet = textwrap.wrap(tweets_rep_local[0], width=85)\n",
        "y_text = 2070\n",
        "for line in tweet:\n",
        "    # width, height = font_tweet.getsize(line)\n",
        "    bbox = font_tweet.getbbox(line)\n",
        "    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]\n",
        "    draw.text((295, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "    y_text += height\n",
        "tweet2 = textwrap.wrap(tweets_rep_local[1], width=85)\n",
        "y_text_2 = 2465\n",
        "for line in tweet2:\n",
        "    # width, height = font_tweet.getsize(line)\n",
        "    bbox = font_tweet.getbbox(line)\n",
        "    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]\n",
        "    draw.text((295, y_text_2), line, font=font_smallName, fill=\"#14161a\")\n",
        "    y_text_2 += height\n",
        "if feedback == 'high':\n",
        "       feedback_num = [str(np.random.randint(700,900)),\n",
        "                       str(np.random.randint(10,13)),\n",
        "                       str(np.random.randint(600,900)),\n",
        "                       str(np.random.randint(1500,2000)),\n",
        "                       str(np.random.randint(3000,6000)),\n",
        "                       str(np.random.randint(250,500)),\n",
        "                       str(np.random.randint(1000,1300)),\n",
        "                       str(np.random.randint(3000,6000))]\n",
        "else:\n",
        "       feedback_num = [str(np.random.randint(200,400)),\n",
        "                       str(np.random.randint(2,5)),\n",
        "                       str(np.random.randint(200,400)),\n",
        "                       str(np.random.randint(500,1000)),\n",
        "                       str(np.random.randint(100,800)),\n",
        "                       str(np.random.randint(100,250)),\n",
        "                       str(np.random.randint(300,600)),\n",
        "                       str(np.random.randint(100,800))]\n",
        "draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)\n",
        "draw.text((529, 1582),feedback_num[1] + \"K\",(0,0,0), font = font_location)\n",
        "draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = \"#667786\")\n",
        "draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = \"#667786\")\n",
        "draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = \"#667786\")\n",
        "draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = \"#667786\")\n",
        "draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = \"#667786\")\n",
        "draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = \"#667786\")   \n",
        "avatar = avatar.replace(\".png\", \"\")\n",
        "newsize = (480,612)\n",
        "img = img.resize(newsize)\n",
        "img_name = str(avatar) + \"_republican_\" + str(generation) + \"_\" + str(feedback) + \"_\" + str(military) + \"_\" + str(education) + \"_\" + str(profession) + \"_\" + str(religion) + '.png'\n",
        "img_name = re.sub(\"[ ,]\", \"\", img_name)\n",
        "img.save(os.path.join(script_dir, \"test_result\", img_name), dpi=(300, 300))\n"
      ],
      "id": "5534ad3c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The following cells will create the conjoint Twitter profiles according to the features established above. Output will be written in the used directory, in a new folder named \"results\". \n"
      ],
      "id": "b8666814"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Generating output folder\n",
        "# os.mkdir(script_dir, \"results\")\n",
        "\n",
        "results_dir = os.path.join(script_dir, \"results\")\n",
        "\n",
        "# Create the directory\n",
        "os.mkdir(results_dir)"
      ],
      "id": "55177bd2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Generating Conjoint Twitter Profiles, Republican Man\n",
        "for avatar in avatars_man: \n",
        "    for religion in Religion:\n",
        "        for profession in Profession:\n",
        "            for education in Education:\n",
        "                for military in Military:\n",
        "                    for generation in Generations:  \n",
        "                            for feedback in Feedback:\n",
        "                                im_bg = Image.open(os.path.join(script_dir, 'TwitterProfileClean_man.png')).convert('RGB')\n",
        "                                im_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Man', avatar, 'larger.jpg'),'r').convert('RGB')\n",
        "                                mask_im = Image.new(\"L\", im_avatar.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im)\n",
        "                                draw.ellipse((0, 0, 536, 536), fill=255)\n",
        "                                mask_im.save('mask_circle.jpg',quality=95)\n",
        "                                back_im = im_bg.copy()\n",
        "                                back_im.paste(im_avatar, (62, 502), mask_im)\n",
        "                                im_top = Image.open(os.path.join(script_dir, 'TopImage', 'elephant.png')).convert('RGB')\n",
        "                                mask_im_top = Image.new(\"L\", im_top.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im_top)\n",
        "                                draw.rectangle((0, 0, 2402, 802), fill=255)\n",
        "                                draw.ellipse((50, 486, 615, 1055), fill=0)\n",
        "                                mask_im_top.save('mask_background.jpg', quality=95)\n",
        "                                back_im.paste(im_top, (0,0), mask_im_top)\n",
        "                                im_sm_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Man', avatar, 'smaller.jpg'),'r').convert('RGB')\n",
        "                                mask_im_sm_avatar = Image.new(\"L\", im_sm_avatar.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im_sm_avatar)\n",
        "                                draw.ellipse((0, 0, 196, 196), fill=255)\n",
        "                                mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)\n",
        "                                back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)\n",
        "                                back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)\n",
        "                                img = back_im\n",
        "                                draw = ImageDraw.Draw(img)\n",
        "                                font_largeName = ImageFont.truetype(\"HelveticaNeue.ttc\", size=72, index = 1)\n",
        "                                font_smallName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "                                if generation == 'boomer':\n",
        "                                    year = str(np.random.randint(1940,1975))\n",
        "                                else:\n",
        "                                    year = str(np.random.randint(1976,1990))\n",
        "                                description = textwrap.wrap(\"I'm a Republican candidate for the House of Representatives. Born in \" + year + \", I'm \" + religion + \"a \" + education + military + \"and currently I am \" + profession + \".\", width=92)\n",
        "                                y_text = 1284\n",
        "                                for line in description:\n",
        "                                    # width, height = font_smallName.getsize(line)\n",
        "                                    bbox = font_smallName.getbbox(line)\n",
        "                                    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]\n",
        "                                    draw.text((61, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text += height\n",
        "                                font_location = ImageFont.truetype(\"HelveticaNeue.ttc\", 60, index = 1)\n",
        "                                font_tweetName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50, index = 1)\n",
        "                                font_tweet = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "                                tweet = textwrap.wrap(tweets_rep_local[0], width=85)\n",
        "                                y_text = 2070\n",
        "                                for line in tweet:\n",
        "                                    # width, height = font_tweet.getsize(line)\n",
        "                                    bbox = font_tweet.getbbox(line)\n",
        "                                    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]\n",
        "                                    draw.text((295, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text += height\n",
        "                                tweet2 = textwrap.wrap(tweets_rep_local[1], width=85)\n",
        "                                y_text_2 = 2465\n",
        "                                for line in tweet2:\n",
        "                                    # width, height = font_tweet.getsize(line)\n",
        "                                    bbox = font_tweet.getbbox(line)\n",
        "                                    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]\n",
        "                                    draw.text((295, y_text_2), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text_2 += height\n",
        "                                if feedback == 'high':\n",
        "                                       feedback_num = [str(np.random.randint(700,900)),\n",
        "                                                       str(np.random.randint(10,13)),\n",
        "                                                       str(np.random.randint(600,900)),\n",
        "                                                       str(np.random.randint(1500,2000)),\n",
        "                                                       str(np.random.randint(3000,6000)),\n",
        "                                                       str(np.random.randint(250,500)),\n",
        "                                                       str(np.random.randint(1000,1300)),\n",
        "                                                       str(np.random.randint(3000,6000))]\n",
        "                                else:\n",
        "                                       feedback_num = [str(np.random.randint(200,400)),\n",
        "                                                       str(np.random.randint(2,5)),\n",
        "                                                       str(np.random.randint(200,400)),\n",
        "                                                       str(np.random.randint(500,1000)),\n",
        "                                                       str(np.random.randint(100,800)),\n",
        "                                                       str(np.random.randint(100,250)),\n",
        "                                                       str(np.random.randint(300,600)),\n",
        "                                                       str(np.random.randint(100,800))]\n",
        "                                draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)\n",
        "                                draw.text((529, 1582),feedback_num[1] + \"K\",(0,0,0), font = font_location)\n",
        "                                draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = \"#667786\")   \n",
        "                                avatar = avatar.replace(\".png\", \"\")\n",
        "                                newsize = (480,612)\n",
        "                                img = img.resize(newsize)\n",
        "                                img_name = str(avatar) + \"_republican_\" + str(generation) + \"_\" + str(feedback) + \"_\" + str(military) + \"_\" + str(education) + \"_\" + str(profession) + \"_\" + str(religion) + '.png'\n",
        "                                img_name = re.sub(\"[ ,]\", \"\", img_name)\n",
        "                                img.save(os.path.join(script_dir, \"results\", img_name), dpi=(300, 300))"
      ],
      "id": "0a9c1bb7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Generating Conjoint Twitter Profiles, Republican Woman\n",
        "for avatar in avatars_woman: \n",
        "    for religion in Religion:\n",
        "        for profession in Profession:\n",
        "            for education in Education:\n",
        "                for military in Military:\n",
        "                    for generation in Generations:  \n",
        "                            for feedback in Feedback:\n",
        "                                im_bg = Image.open(os.path.join(script_dir,'TwitterProfileClean_woman.png')).convert('RGB')\n",
        "                                im_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Woman', avatar, 'larger.png'),'r').convert('RGB')\n",
        "                                mask_im = Image.new(\"L\", im_avatar.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im)\n",
        "                                draw.ellipse((0, 0, 536, 536), fill=255)\n",
        "                                mask_im.save('mask_circle.jpg', quality=95)\n",
        "                                back_im = im_bg.copy()\n",
        "                                back_im.paste(im_avatar, (62, 502), mask_im)\n",
        "                                im_top = Image.open(os.path.join(script_dir, 'TopImage', \"elephant.png\")).convert('RGB')\n",
        "                                mask_im_top = Image.new(\"L\", im_top.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im_top)\n",
        "                                draw.rectangle((0, 0, 2402, 802), fill=255)\n",
        "                                draw.ellipse((50, 486, 615, 1055), fill=0)\n",
        "                                mask_im_top.save('mask_background.jpg', quality=95)\n",
        "                                back_im.paste(im_top, (0,0), mask_im_top)\n",
        "                                im_sm_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Woman', avatar, 'smaller.png'),'r').convert('RGB')\n",
        "                                mask_im_sm_avatar = Image.new(\"L\", im_sm_avatar.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im_sm_avatar)\n",
        "                                draw.ellipse((0, 0, 196, 196), fill=255)\n",
        "                                mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)\n",
        "                                back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)\n",
        "                                back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)\n",
        "                                img = back_im\n",
        "                                draw = ImageDraw.Draw(img)\n",
        "                                font_largeName = ImageFont.truetype(\"HelveticaNeue.ttc\", size=72, index = 1)\n",
        "                                font_smallName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "                                if generation == 'boomer':\n",
        "                                    year = str(np.random.randint(1940,1975))\n",
        "                                else:\n",
        "                                    year = str(np.random.randint(1976,1990))\n",
        "                                description = textwrap.wrap(\"I'm a Republican candidate for the House of Representatives. Born in \" + year + \", I'm \" + religion + \"a \" + education + military + \"and currently I am \" + profession + \".\", width=92)\n",
        "                                y_text = 1284\n",
        "                                for line in description:\n",
        "                                    width, height = font_smallName.getsize(line)\n",
        "                                    draw.text((61, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text += height\n",
        "                                font_location = ImageFont.truetype(\"HelveticaNeue.ttc\", 60, index = 1)\n",
        "                                font_tweetName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50, index = 1)\n",
        "                                font_tweet = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "                                tweet = textwrap.wrap(tweets_rep_local[0], width=85)\n",
        "                                y_text = 2070\n",
        "                                for line in tweet:\n",
        "                                    width, height = font_tweet.getsize(line)\n",
        "                                    draw.text((295, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text += height\n",
        "                                tweet2 = textwrap.wrap(tweets_rep_local[1], width=85)\n",
        "                                y_text_2 = 2465\n",
        "                                for line in tweet2:\n",
        "                                    width, height = font_tweet.getsize(line)\n",
        "                                    draw.text((295, y_text_2), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text_2 += height\n",
        "                                if feedback == 'high':\n",
        "                                       feedback_num = [str(np.random.randint(700,900)),\n",
        "                                                       str(np.random.randint(10,13)),\n",
        "                                                       str(np.random.randint(600,900)),\n",
        "                                                       str(np.random.randint(1500,2000)),\n",
        "                                                       str(np.random.randint(3000,6000)),\n",
        "                                                       str(np.random.randint(250,500)),\n",
        "                                                       str(np.random.randint(1000,1300)),\n",
        "                                                       str(np.random.randint(3000,6000))]\n",
        "                                else:\n",
        "                                       feedback_num = [str(np.random.randint(200,400)),\n",
        "                                                       str(np.random.randint(2,5)),\n",
        "                                                       str(np.random.randint(200,400)),\n",
        "                                                       str(np.random.randint(500,1000)),\n",
        "                                                       str(np.random.randint(100,800)),\n",
        "                                                       str(np.random.randint(100,250)),\n",
        "                                                       str(np.random.randint(300,600)),\n",
        "                                                       str(np.random.randint(100,800))]\n",
        "                                draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)\n",
        "                                draw.text((529, 1582),feedback_num[1] + \"K\",(0,0,0), font = font_location)\n",
        "                                draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = \"#667786\")   \n",
        "                                avatar = avatar.replace(\".png\", \"\")\n",
        "                                newsize = (480,612)\n",
        "                                img = img.resize(newsize)\n",
        "                                img_name = str(avatar) + \"_republican_\" + str(generation) + \"_\" + str(feedback) + \"_\" + str(military) + \"_\" + str(education) + \"_\" + str(profession) + \"_\" + str(religion) + '.png'\n",
        "                                img_name = re.sub(\"[ ,]\", \"\", img_name)\n",
        "                                img.save(os.path.join(script_dir, \"results\", img_name), dpi=(300, 300))"
      ],
      "id": "4d6d7043",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Generating Conjoint Twitter Profiles, Democrat Man\n",
        "for avatar in avatars_man: \n",
        "    for religion in Religion:\n",
        "        for profession in Profession:\n",
        "            for education in Education:\n",
        "                for military in Military:\n",
        "                    for generation in Generations:  \n",
        "                            for feedback in Feedback:\n",
        "                                im_bg = Image.open(os.path.join(script_dir,'TwitterProfileClean_man.png')).convert('RGB')\n",
        "                                im_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Man', avatar, 'larger.png'),'r').convert('RGB')\n",
        "                                mask_im = Image.new(\"L\", im_avatar.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im)\n",
        "                                draw.ellipse((0, 0, 536, 536), fill=255)\n",
        "                                mask_im.save('mask_circle.jpg', quality=95)\n",
        "                                back_im = im_bg.copy()\n",
        "                                back_im.paste(im_avatar, (62, 502), mask_im)\n",
        "                                im_top = Image.open(os.path.join(script_dir, 'TopImage', \"donkey.png\")).convert('RGB')\n",
        "                                mask_im_top = Image.new(\"L\", im_top.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im_top)\n",
        "                                draw.rectangle((0, 0, 2402, 802), fill=255)\n",
        "                                draw.ellipse((50, 486, 615, 1055), fill=0)\n",
        "                                mask_im_top.save('mask_background.jpg', quality=95)\n",
        "                                back_im.paste(im_top, (0,0), mask_im_top)\n",
        "                                im_sm_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Man', avatar, 'smaller.png'),'r').convert('RGB')\n",
        "                                mask_im_sm_avatar = Image.new(\"L\", im_sm_avatar.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im_sm_avatar)\n",
        "                                draw.ellipse((0, 0, 196, 196), fill=255)\n",
        "                                mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)\n",
        "                                back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)\n",
        "                                back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)\n",
        "                                img = back_im\n",
        "                                draw = ImageDraw.Draw(img)\n",
        "                                font_largeName = ImageFont.truetype(\"HelveticaNeue.ttc\", size=72, index = 1)\n",
        "                                font_smallName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "                                if generation == 'boomer':\n",
        "                                    year = str(np.random.randint(1940,1975))\n",
        "                                else:\n",
        "                                    year = str(np.random.randint(1976,1990))\n",
        "                                description = textwrap.wrap(\"I'm a Democratic candidate for the House of Representatives. Born in \" + year + \", I'm \" + religion + \"a \" + education + military + \"and currently I am \" + profession + \".\", width=92)\n",
        "                                y_text = 1284\n",
        "                                for line in description:\n",
        "                                    width, height = font_smallName.getsize(line)\n",
        "                                    draw.text((61, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text += height\n",
        "                                font_location = ImageFont.truetype(\"HelveticaNeue.ttc\", 60, index = 1)\n",
        "                                font_tweetName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50, index = 1)\n",
        "                                font_tweet = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "                                tweet = textwrap.wrap(tweets_dem_local[0], width=85)\n",
        "                                y_text = 2070\n",
        "                                for line in tweet:\n",
        "                                    width, height = font_tweet.getsize(line)\n",
        "                                    draw.text((295, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text += height\n",
        "                                tweet2 = textwrap.wrap(tweets_dem_local[1], width=85)\n",
        "                                y_text_2 = 2465\n",
        "                                for line in tweet2:\n",
        "                                    width, height = font_tweet.getsize(line)\n",
        "                                    draw.text((295, y_text_2), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text_2 += height\n",
        "                                if feedback == 'high':\n",
        "                                       feedback_num = [str(np.random.randint(700,900)),\n",
        "                                                       str(np.random.randint(10,13)),\n",
        "                                                       str(np.random.randint(600,900)),\n",
        "                                                       str(np.random.randint(1500,2000)),\n",
        "                                                       str(np.random.randint(3000,6000)),\n",
        "                                                       str(np.random.randint(250,500)),\n",
        "                                                       str(np.random.randint(1000,1300)),\n",
        "                                                       str(np.random.randint(3000,6000))]\n",
        "                                else:\n",
        "                                       feedback_num = [str(np.random.randint(200,400)),\n",
        "                                                       str(np.random.randint(2,5)),\n",
        "                                                       str(np.random.randint(200,400)),\n",
        "                                                       str(np.random.randint(500,1000)),\n",
        "                                                       str(np.random.randint(100,800)),\n",
        "                                                       str(np.random.randint(100,250)),\n",
        "                                                       str(np.random.randint(300,600)),\n",
        "                                                       str(np.random.randint(100,800))]\n",
        "                                draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)\n",
        "                                draw.text((529, 1582),feedback_num[1] + \"K\",(0,0,0), font = font_location)\n",
        "                                draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = \"#667786\")   \n",
        "                                avatar = avatar.replace(\".png\", \"\")\n",
        "                                newsize = (480,612)\n",
        "                                img = img.resize(newsize)\n",
        "                                img_name = str(avatar) + \"_democrat_\" + str(generation) + \"_\" + str(feedback) + \"_\" + str(military) + \"_\" + str(education) + \"_\" + str(profession) + \"_\" + str(religion) + '.png'\n",
        "                                img_name = re.sub(\"[ ,]\", \"\", img_name)\n",
        "                                img.save(os.path.join(script_dir, \"results\", img_name), dpi=(300, 300))"
      ],
      "id": "3d40ac04",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Generating Conjoint Twitter Profiles, Democrat Woman\n",
        "for avatar in avatars_woman: \n",
        "    for religion in Religion:\n",
        "        for profession in Profession:\n",
        "            for education in Education:\n",
        "                for military in Military:\n",
        "                    for generation in Generations:  \n",
        "                            for feedback in Feedback:\n",
        "                                im_bg = Image.open(os.path.join(script_dir,'TwitterProfileClean_woman.png')).convert('RGB')\n",
        "                                im_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Woman', avatar, 'larger.png'),'r').convert('RGB')\n",
        "                                mask_im = Image.new(\"L\", im_avatar.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im)\n",
        "                                draw.ellipse((0, 0, 536, 536), fill=255)\n",
        "                                mask_im.save('mask_circle.jpg', quality=95)\n",
        "                                back_im = im_bg.copy()\n",
        "                                back_im.paste(im_avatar, (62, 502), mask_im)\n",
        "                                im_top = Image.open(os.path.join(script_dir, 'TopImage', \"donkey.png\")).convert('RGB')\n",
        "                                mask_im_top = Image.new(\"L\", im_top.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im_top)\n",
        "                                draw.rectangle((0, 0, 2402, 802), fill=255)\n",
        "                                draw.ellipse((50, 486, 615, 1055), fill=0)\n",
        "                                mask_im_top.save('mask_background.jpg', quality=95)\n",
        "                                back_im.paste(im_top, (0,0), mask_im_top)\n",
        "                                im_sm_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Woman', avatar, 'smaller.png'),'r').convert('RGB')\n",
        "                                mask_im_sm_avatar = Image.new(\"L\", im_sm_avatar.size, 0)\n",
        "                                draw = ImageDraw.Draw(mask_im_sm_avatar)\n",
        "                                draw.ellipse((0, 0, 196, 196), fill=255)\n",
        "                                mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)\n",
        "                                back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)\n",
        "                                back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)\n",
        "                                img = back_im\n",
        "                                draw = ImageDraw.Draw(img)\n",
        "                                font_largeName = ImageFont.truetype(\"HelveticaNeue.ttc\", size=72, index = 1)\n",
        "                                font_smallName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "                                if generation == 'boomer':\n",
        "                                    year = str(np.random.randint(1940,1975))\n",
        "                                else:\n",
        "                                    year = str(np.random.randint(1976,1990))\n",
        "                                description = textwrap.wrap(\"I'm a Democratic candidate for the House of Representatives. Born in \" + year + \", I'm \" + religion + \"a \" + education + military + \"and currently I am \" + profession + \".\", width=92)\n",
        "                                y_text = 1284\n",
        "                                for line in description:\n",
        "                                    width, height = font_smallName.getsize(line)\n",
        "                                    draw.text((61, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text += height\n",
        "                                font_location = ImageFont.truetype(\"HelveticaNeue.ttc\", 60, index = 1)\n",
        "                                font_tweetName = ImageFont.truetype(\"HelveticaNeue.ttc\", 50, index = 1)\n",
        "                                font_tweet = ImageFont.truetype(\"HelveticaNeue.ttc\", 50)\n",
        "                                tweet = textwrap.wrap(tweets_dem_local[0], width=85)\n",
        "                                y_text = 2070\n",
        "                                for line in tweet:\n",
        "                                    width, height = font_tweet.getsize(line)\n",
        "                                    draw.text((295, y_text), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text += height\n",
        "                                tweet2 = textwrap.wrap(tweets_dem_local[1], width=85)\n",
        "                                y_text_2 = 2465\n",
        "                                for line in tweet2:\n",
        "                                    width, height = font_tweet.getsize(line)\n",
        "                                    draw.text((295, y_text_2), line, font=font_smallName, fill=\"#14161a\")\n",
        "                                    y_text_2 += height\n",
        "                                if feedback == 'high':\n",
        "                                       feedback_num = [str(np.random.randint(700,900)),\n",
        "                                                       str(np.random.randint(10,13)),\n",
        "                                                       str(np.random.randint(600,900)),\n",
        "                                                       str(np.random.randint(1500,2000)),\n",
        "                                                       str(np.random.randint(3000,6000)),\n",
        "                                                       str(np.random.randint(250,500)),\n",
        "                                                       str(np.random.randint(1000,1300)),\n",
        "                                                       str(np.random.randint(3000,6000))]\n",
        "                                else:\n",
        "                                       feedback_num = [str(np.random.randint(200,400)),\n",
        "                                                       str(np.random.randint(2,5)),\n",
        "                                                       str(np.random.randint(200,400)),\n",
        "                                                       str(np.random.randint(500,1000)),\n",
        "                                                       str(np.random.randint(100,800)),\n",
        "                                                       str(np.random.randint(100,250)),\n",
        "                                                       str(np.random.randint(300,600)),\n",
        "                                                       str(np.random.randint(100,800))]\n",
        "                                draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)\n",
        "                                draw.text((529, 1582),feedback_num[1] + \"K\",(0,0,0), font = font_location)\n",
        "                                draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = \"#667786\")\n",
        "                                draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = \"#667786\")   \n",
        "                                avatar = avatar.replace(\".png\", \"\")\n",
        "                                newsize = (480,612)\n",
        "                                img = img.resize(newsize)\n",
        "                                img_name = str(avatar) + \"_democrat_\" + str(generation) + \"_\" + str(feedback) + \"_\" + str(military) + \"_\" + str(education) + \"_\" + str(profession) + \"_\" + str(religion) + '.png'\n",
        "                                img_name = re.sub(\"[ ,]\", \"\", img_name)\n",
        "                                img.save(os.path.join(script_dir,\"results\", img_name), dpi=(300, 300))"
      ],
      "id": "9cbaf1ef",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Citation for this script should go to Alessandro Vecchiato (2021), \"Replication Material of Introducing Visual Conjoint Experiments.\" For information and comments contacts can be found at avecc.people.stanford.edu.\n"
      ],
      "id": "2ec9372b"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}