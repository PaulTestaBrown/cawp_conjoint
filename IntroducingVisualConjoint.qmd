---
format: html
---

# Replication Code for Images in "Introducing Visual Conjoint Experiments", Vecchiato(2021)

This replication code allows for the creation of all the Twitter profiles used for the visual conjoint experiment in Vecchiato and Munger (2021). The code creates empty Twitter profiles that are then modified with the desired features using a nested loop. While the code can be edited freely to allow for different features, the location parameters of the Twitter profile elements, such as likes, retweets, and avatars, should not be changed.

```{python}
#Preamble
from PIL import Image, ImageDraw, ImageFilter, ImageFont
import os
import numpy as np
import random
import textwrap
import re, string
import pandas as pd

```

```{python}
#Local directory
script_dir = os.path.abspath('')
```

```{python}
#Loading subfolders
avatars_man = os.listdir(os.path.join(script_dir, "avatars", "man"))
avatars_man.remove('.DS_Store')
avatars_woman = os.listdir(os.path.join(script_dir, "avatars", "woman"))
avatars_woman.remove('.DS_Store')

top_image = os.listdir(os.path.join(script_dir, "TopImage"))

#Twitter features. The elements included in the vectors below are those then used to generate the Twitter profiles. 
#Pay attention to the punctuation included in the 'bio' features to ensure readablity. 
tweets_dem_local = ["The Center County Democratic Party is working to ensure that the Planned Parenthood stays open for good.","Congratulations to the Social Justice club at the Center County High; I applaud your efforts to combat racism in our community." ] 
tweets_rep_local = ["The Center County Republican Party is working to ensure that local businesses can stay open.", "Congratulations to the Rifle club at the Center County High; I applaud your efforts to ensure safe and responsible gun use in our community."]
Feedback = ['high', 'low']
Generations = ['boomer', 'millennial']
Religion = ['Jewish, ', 'Catholic, ', 'Protestant, ', 'Mormon, ', '']
Profession = ['an enterpreneur', 'a lawyer','a doctor', 'a teacher', 'a farmer', 'a car dealer']
Education = ['High School graduate', 'College graduate', 'Ivy League graduate']
Military = [', I served, ', ' ']

white_male_names = [
  'James Anderson',
  'Michael Thompson',
  'Christopher Walker',
  'Andrew Peterson',
  'William Carter'
  ]

white_female_names = [
  'Emily Johnson',
  'Sarah Miller',
  'Jessica Brown',
  'Ashley Wilson',
  'Megan Davis'
]



black_male_names = [
  'Jamal Jackson',
  'Malik Robinson',
  'Tyrone Johnson',
  'Darnell Harris',
  'DeAndre Lewis'
]

black_female_names = [
  'Latoya Williams',
  'Shanice Taylor',
  'Aaliyah Brown',
  'Keisha Davis',
  'Monique Johnson'
]

```


# Conjoint Attributes

## Images

```{python}

# Images

# Issue 2

issue_1_p1_avatavars = [ 'i1_p1_bm', 'i1_p1_wm', 'i1_p1_bf', 'i1_p1_wf']
issue_1_p2_avatavars = [ 'i1_p2_bm', 'i1_p2_wm', 'i1_p2_bf', 'i1_p2_wf']
issue_1_p3_avatavars = [ 'i1_p3_bm', 'i1_p3_wm', 'i1_p3_bf', 'i1_p3_wf']
issue_1_p4_avatavars = [ 'i1_p4_bm', 'i1_p4_wm', 'i1_p4_bf', 'i1_p4_wf']
issue_1_p5_avatavars = [ 'i1_p5_bm', 'i1_p5_wm', 'i1_p5_bf', 'i1_p5_wf']



# Issue 2

issue_2_p1_avatavars = [ 'i2_p1_bm', 'i2_p1_wm', 'i2_p1_bf', 'i2_p1_wf']
issue_2_p2_avatavars = [ 'i2_p2_bm', 'i2_p2_wm', 'i2_p2_bf', 'i2_p2_wf']
issue_2_p3_avatavars = [ 'i2_p3_bm', 'i2_p3_wm', 'i2_p3_bf', 'i2_p3_wf']
issue_2_p4_avatavars = [ 'i2_p4_bm', 'i2_p4_wm', 'i2_p4_bf', 'i2_p4_wf']
issue_2_p5_avatavars = [ 'i2_p5_bm', 'i2_p5_wm', 'i2_p5_bf', 'i2_p5_wf']

# Issue 3

issue_3_p1_avatavars = [ 'i3_p1_bm', 'i3_p1_wm', 'i3_p1_bf', 'i3_p1_wf']
issue_3_p2_avatavars = [ 'i3_p2_bm', 'i3_p2_wm', 'i3_p2_bf', 'i3_p2_wf']
issue_3_p3_avatavars = [ 'i3_p3_bm', 'i3_p3_wm', 'i3_p3_bf', 'i3_p3_wf']
issue_3_p4_avatavars = [ 'i3_p4_bm', 'i3_p4_wm', 'i3_p4_bf', 'i3_p4_wf']
issue_3_p5_avatavars = [ 'i3_p5_bm', 'i3_p5_wm', 'i3_p5_bf', 'i3_p5_wf']
```


## Biography

```{python}

# ---- Names ----

## ToDo: Scale Up So that it is 
white_male_names = [
  'James Anderson',
  'Michael Thompson',
  'Christopher Walker',
  'Andrew Peterson',
  'William Carter'
  ]

white_female_names = [
  'Emily Johnson',
  'Sarah Miller',
  'Jessica Brown',
  'Ashley Wilson',
  'Megan Davis'
]



black_male_names = [
  'Jamal Jackson',
  'Malik Robinson',
  'Tyrone Johnson',
  'Darnell Harris',
  'DeAndre Lewis'
]

black_female_names = [
  'Latoya Williams',
  'Shanice Taylor',
  'Aaliyah Brown',
  'Keisha Davis',
  'Monique Johnson'
]

# ---- Twitter Handles ----
white_male_twitter = [
  '@JamesAnderson',
  '@MichaelThompson',
  '@ChristopherWalker',
  '@AndrewPeterson',
  '@WilliamCarter'
  ]

white_female_twitter = [
  '@EmilyJohnson',
  '@SarahMiller',
  '@JessicaBrown',
  '@AshleyWilson',
  '@MeganDavis'
]


black_male_twitter = [
  '@JamalJackson',
  '@MalikRobinson',
  '@TyroneJohnson',
  '@DarnellHarris',
  '@DeAndreLewis'
]

black_female_twitter = [
  '@LatoyaWilliams',
  '@ShaniceTaylor',
  '@AaliyahBrown',
  '@KeishaDavis',
  '@MoniqueJohnson'
]

# Tweets

treat_position = ['pro','con']
treat_format = ['facts','narrative','both']


# ----- Biography ----

profession = [
#  "Parent",
  "Construction worker",
#  "Law enforcement officer",
  "Lawyer",
#  "Professor",
#  "Activist", 
  "Community organizer"
  ]

n_profession = 9
n_tweets_about = 4
n_extremity = 4
n_partisanship = 3
n_tweets = 10
n_race = 2
n_gender = 2
n_hash_tag =

  
tweets_about = [
  "criminal justice, cash bail, prison reform", # Policy Specific Pro
  "crime, justice, law and order", # Policy Specific Con
#  "policy, wine, and coffee", # Policy + High Class
#  "policy, pop culture, and puppies" # Policy + No Class
]  

# Cut Ideology
# ideology = [
#   "Moderate",
#   "Liberal",
#   "Conservative"
# ]

extremity = [
  "",
#  "Proud ",
  "Strong ",
#  "Moderate "
]

# Just Do partisanship
partisanship = [
  "Democrat",
  "Independent",
  "Republican"
]

# City

city = [
  "Washington, DC",
  "New York, NY",
#  "San Francisco, CA",
#  "Fresno, CA",
#  "Staten Island, NY",
#  "Dallas, TX"
]

year = ["2018", "2019", "2020", "2021", "2022"]
month = [
  "January", "February", "March", "April", 
  "May", "June", "July", "August", "September", 
  "October", "November", "December"
  ]
 

# hashtag_pro = [
#   '#EndCashBail',
#   '#BailReform',
#   '#BlackLivesMatter'
#   '#AbolishCashBail'
# ]
# 
# hashtag_con = [
#   '#RightOnCrime',
#   '#TruthInSentencing',
#   '#BlueLivesMatter',
#   '#KeepCommunitiesSafe'
# ]

# generation = [
#   'Gen X',
#   'Millennial',
#   'Gen Z'
# ]



```

# Tweets

```{python}
cashbail_tweets_df = pd.read_csv("cash_bail_tweets.csv")

tweet1 = cashbail_tweets_df.loc[(cashbail_tweets_df['treatment'] == 'facts') & (cashbail_tweets_df['argument'] == 'pro') & (cashbail_tweets_df['line'] == 1), 'filler'].iloc[0]

```


# Generate Clean Profiles

```{python}
for p in range(0,5):
  profile = p + 1
  name = black_female_names[p]
  handle = str('@') + re.sub("[ ,]", "_",name)
  img = Image.open('twitter_profile_clean_cwap_edit.png').convert('RGB')
  draw = ImageDraw.Draw(img)
  font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
  draw.text((61, 1079), name, (0,0,0),font=font_largeName)
  font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
  draw.text((61, 1170), handle , font=font_smallName, fill = "#667786")
  draw.text((2000, 875),"Follow",font=font_largeName, fill = "#1ca1f2")
  font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
  draw.text((155, 1480),"Washington, DC",font=font_smallName, fill = "#667786")
  draw.text((1411, 1480),"Joined November 2010",font=font_smallName, fill = "#667786")
  font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
  draw.text((295, 1987),name,(0,0,0), font=font_tweetName)
  img_name = str("TwitterProfileClean_p") + str(p+1) + '_bw.png' 
  img.save(os.path.join(script_dir,'clean_profiles', img_name,''), dpi=(300, 300))

```


# Test Image

```{python}
# Again Let's use a black woman

generation = "boomer"
religion = "Catholic"
education = "JD"
military = " "
feedback = "high"
avatar = "p1_larger.png"

im_bg = Image.open(os.path.join(script_dir, 'clean_profiles/TwitterProfileClean_p1_bw.png')).convert('RGB')
im_avatar = Image.open(os.path.join(script_dir, 'avatars', 'woman',"black" ,"p1", 'p1_larger.png'),'r').convert('RGB')
mask_im = Image.new("L", im_avatar.size, 0)
draw = ImageDraw.Draw(mask_im)
draw.ellipse((0, 0, 536, 536), fill=255)
mask_im.save('mask_circle.jpg',quality=95)
back_im = im_bg.copy()
back_im.paste(im_avatar, (62, 502), mask_im)
# im_top = Image.open(os.path.join(script_dir, 'TopImage', 'elephant.png')).convert('RGB')
# mask_im_top = Image.new("L", im_top.size, 0)
# draw = ImageDraw.Draw(mask_im_top)
# draw.rectangle((0, 0, 2402, 802), fill='#667786')
# draw.ellipse((50, 486, 615, 1055), fill=0)
# mask_im_top.save('mask_background.jpg', quality=95)
# back_im.paste(im_top, (0,0), mask_im_top)
im_sm_avatar = Image.open(os.path.join(script_dir, 'avatars', 'woman',"black" ,"p1", 'p1_smaller.png'),'r').convert('RGB')
mask_im_sm_avatar = Image.new("L", im_sm_avatar.size, 0)
draw = ImageDraw.Draw(mask_im_sm_avatar)
draw.ellipse((0, 0, 196, 196), fill=255)
mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)
back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)
# back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)
img = back_im
draw = ImageDraw.Draw(img)
font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
# if generation == 'boomer':
#     year = str(np.random.randint(1940,1975))
# else:
#     year = str(np.random.randint(1976,1990))
description = textwrap.wrap("I'm " + 
  profession[0] + " focused on criminal justice | " + 
  ideology[0] + " " + partisanship[0] + " | " +
  hashtag_pro[0], width=92)
print(description)
y_text = 1284
for line in description:
    # width, height = font_smallName.getsize(line)
    bbox = font_smallName.getbbox(line)
    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
    draw.text((61, y_text), line, font=font_smallName, fill="#14161a")
    y_text += height
font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
font_tweet = ImageFont.truetype("HelveticaNeue.ttc", 50)
wrapper = textwrap.TextWrapper(width=85, replace_whitespace=False)
# Wrap the text
tweet1 =  textwrap.wrap(tweet_pro_fact_cashbail1[0], width = 85)
tweet2 =  textwrap.wrap(tweet_pro_fact_cashbail2[0], width = 85)
tweet3 =  textwrap.wrap(tweet_pro_fact_cashbail3[0], width = 85)
# tweet = textwrap.TextWrapper(tweet_pro_fact_cashbail[0], width=85, replace_whitespace=False)
y_text = 2070
for line in tweet1:
    print(line)
    # width, height = font_tweet.getsize(line)
    bbox = font_tweet.getbbox(line)
    print(bbox)
    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
    draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
    y_text += height

y_text += height

for line in tweet2:
    print(line)
    # width, height = font_tweet.getsize(line)
    bbox = font_tweet.getbbox(line)
    print(bbox)
    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
    draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
    y_text += height

y_text += height

for line in tweet3:
    print(line)
    # width, height = font_tweet.getsize(line)
    bbox = font_tweet.getbbox(line)
    print(bbox)
    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
    draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
    y_text += height
    feedback_num = [str(np.random.randint(700,900)),
                    str(np.random.randint(10,13)),
                    str(np.random.randint(600,900)),  
                    str(np.random.randint(1500,2000)),
                    str(np.random.randint(3000,6000)),
                    str(np.random.randint(250,500)),
                    str(np.random.randint(1000,1300)),
                    str(np.random.randint(3000,6000))]
draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)
draw.text((529, 1582),feedback_num[1] + "K",(0,0,0), font = font_location)
# draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = "#667786")
# draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = "#667786")
# draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = "#667786")
draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = "#667786")
draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = "#667786")
draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = "#667786")   
avatar = avatar.replace(".png", "")
newsize = (480,612)
img = img.resize(newsize)
img_name = str(avatar) + "_" + str(profession[0]) + '.png'
img_name = re.sub("[ ,]", "", img_name)
img.save(os.path.join(script_dir, "test_result", img_name), dpi=(300, 300))



```

# Generate P1 Profiles

```{python}
# issue_1_p1_avatavars = ["i1_p1_bm"]
# treat_position = ["pro"]
# treat_format = ["facts"]
# profession = ["Parent"]
# extremity = [" "]
# partisanship = ["Independent"]
# tweets_about = ["policy, pop culture, and puppies"]
# city = ["Wasington, DC"]
# year = ["2016"]
# month = ["January"]
# 
# for a in issue_1_p1_avatavars:
#   for t1 in treat_position:
#     for t2 in treat_format:
#       for p in profession:
#         for e in extremity:
#           for pid in partisanship:
#             for ta in tweets_about:
#               for c in city:
#                             if 'bm' in a:
#                                 p_name = black_male_names[0]
#                                 p_handle = str('@') + re.sub("[ ,]", "_",p_name)
#                             if 'wm' in a:
#                                 p_name = white_male_names[0]
#                                 p_handle = str('@') + re.sub("[ ,]", "_",p_name)
#                             if 'bf' in a:
#                                 p_name = black_female_names[0]
#                                 p_handle = str('@') + re.sub("[ ,]", "_",p_name)
#                             if 'wf' in a:
#                                 p_name = white_female_names[0]
#                                 p_handle = str('@') + re.sub("[ ,]", "_",p_name)
#                             # Biography
#                             description = str(p) + " | " + str(e) + str(pid) + " | Tweets about " + str(ta)
#                             # print(description)
#                             # descritption = textwrap.wrap(description, width = 92)
#                             # print(description)
#                   ## Fill In Tweets
#                   # ---- Pro Facts ----
#                             if t1 == "pro" and t2 == "facts":
#                                 tweet1 = str(cashbail_tweets_df.loc[
#                                   (cashbail_tweets_df['argument'] == t1) &
#                                   (cashbail_tweets_df['treatment'] == t2) &
#                                   (cashbail_tweets_df['line'] == 1) &
#                                   (cashbail_tweets_df['profile'] == 1),
#                                   'filler'].iloc[0])
#                                 print(tweet1)
#                             if t1 == "pro" and t2 == "facts":
#                                 tweet2 = str(cashbail_tweets_df.loc[
#                                   (cashbail_tweets_df['argument'] == t1) &
#                                   (cashbail_tweets_df['treatment'] == t2) &
#                                   (cashbail_tweets_df['line'] == 2) &
#                                   (cashbail_tweets_df['profile'] == 1),
#                                   'filler'].iloc[0])
#                             if t1 == "pro" and t2 == "facts":
#                                 tweet3 = str(cashbail_tweets_df.loc[
#                                   (cashbail_tweets_df['argument'] == t1) &
#                                   (cashbail_tweets_df['treatment'] == t2) &
#                                   (cashbail_tweets_df['line'] == 3) &
#                                   (cashbail_tweets_df['profile'] == 1),
#                                 'filler'].iloc[0])
#                    # ---- Pro Narrative ----
#                             if t1 == "pro" and t2 == "narrative":
#                               tweet1 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1) &
#                                 (cashbail_tweets_df['treatment'] == t2) &
#                                 (cashbail_tweets_df['line'] == 1),
#                                 'filler'].iloc[0])
#                             if t1 == "pro" and t2 == "narrative":
#                               tweet2 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1) &
#                                 (cashbail_tweets_df['treatment'] == t2) &
#                                 (cashbail_tweets_df['line'] == 2),
#                                 'filler'].iloc[0])
#                             if t1 == "pro" and t2 == "narrative":
#                               tweet3 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1) &
#                                 (cashbail_tweets_df['treatment'] == t2) &
#                                 (cashbail_tweets_df['line'] == 3),
#                                 'filler'].iloc[0])
#                             # ---- Pro Both ----
#                             if t1 == "pro" and t2 == "both":
#                               tweet1 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 ) &
#                                 (cashbail_tweets_df['treatment'] == t2 ) &
#                                 (cashbail_tweets_df['line'] == 1) ,
#                                 'filler'].iloc[0])
#                             if t1 == "pro" and t2 == "both":
#                               tweet2 = str(cashbail_tweets_df.loc[
#                                (cashbail_tweets_df['argument'] == t1 ) &
#                                (cashbail_tweets_df['treatment'] == t2 ) &
#                                (cashbail_tweets_df['line'] == 2) ,
#                                 'filler'].iloc[0])
#                             if t1 == "pro" and t2 == "both":
#                               tweet3 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 ) &
#                                 (cashbail_tweets_df['treatment'] == t2 ) &
#                                 (cashbail_tweets_df['line'] == 3) ,
#                                 'filler'].iloc[0])
#                             # ---- Con Facts ----
#                             if t1 == "con" and t2 == "facts":
#                               tweet1 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 ) &
#                                 (cashbail_tweets_df['treatment'] == t2 ) &
#                                 (cashbail_tweets_df['line'] == 1) ,
#                                 'filler'].iloc[0])
#                             if t1 == "con" and t2 == "facts":
#                               tweet2 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 ) &
#                                 (cashbail_tweets_df['treatment'] == t2 ) &
#                                 (cashbail_tweets_df['line'] == 2) ,
#                                 'filler'].iloc[0])
#                             if t1 == "con" and t2 == "facts":
#                               tweet3 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 ) &
#                                 (cashbail_tweets_df['treatment'] == t2 ) &
#                                 (cashbail_tweets_df['line'] == 3) ,
#                                 'filler'].iloc[0])
#                              # ---- Con Narrative ----
#                             if t1 == "con" and t2 == "narrative":
#                               tweet1 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 )&
#                                 (cashbail_tweets_df['treatment'] == t2 )&
#                                 (cashbail_tweets_df['line'] == 1),
#                                 'filler'].iloc[0])
#                             if t1 == "con" and t2 == "narrative":
#                               tweet2 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 ) &
#                                 (cashbail_tweets_df['treatment'] == t2 ) &
#                                 (cashbail_tweets_df['line'] == 2) ,
#                                 'filler'].iloc[0])
#                             if t1 == "con" and t2 == "narrative":
#                               tweet3 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 ) &
#                                 (cashbail_tweets_df['treatment'] == t2 ) &
#                                 (cashbail_tweets_df['line'] == 3) ,
#                                 'filler'].iloc[0])
#                             # ---- Con Both ----
#                             if t1 == "con" and t2 == "both":
#                               tweet1 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 ) &
#                                 (cashbail_tweets_df['treatment'] == t2 ) &
#                                 (cashbail_tweets_df['line'] == 1) ,
#                                 'filler'].iloc[0])
#                             if t1 == "con" and t2 == "both":
#                               tweet2 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 ) &
#                                 (cashbail_tweets_df['treatment'] == t2 ) &
#                                 (cashbail_tweets_df['line'] == 2) ,
#                                 'filler'].iloc[0])
#                             if t1 == "con" and t2 == "both":
#                               tweet3 = str(cashbail_tweets_df.loc[
#                                 (cashbail_tweets_df['argument'] == t1 ) &
#                                 (cashbail_tweets_df['treatment'] == t2 ) &
#                                 (cashbail_tweets_df['line'] == 3) ,
#                                 'filler'].iloc[0])
#                             # Load images
#                             # Load Clean Profile
#                             img = Image.open('twitter_profile_clean_cwap_edit.png').convert('RGB')
#                             draw = ImageDraw.Draw(img)
#                             # Add Name
#                             font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
#                             draw.text((61, 1079), p_name, (0,0,0),font=font_largeName)
#                             font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
#                             # Add Handle
#                             draw.text((61, 1170), p_handle , font=font_smallName, fill = "#667786")
#                             draw.text((2000, 875),"Follow",font=font_largeName, fill = "#1ca1f2")
#                             font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
#                             # Vary City
#                             draw.text((155, 1480), c ,font=font_smallName, fill = "#667786")
#                             joined = "Joined" + str(random.choice(month)) + str(random.choice(year))
#                             draw.text((1411, 1480), joined, font=font_smallName, fill = "#667786")
#                             font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
#                             draw.text((295, 1987),p_name,(0,0,0), font=font_tweetName)
#                             im_bg = img
#                            # Open Images ## START HERE
#                             back_im = im_bg.copy()
#                             avatar_path = os.path.join(
#                               script_dir, 'avatars', 'issue1',"profile1/")
#                             im_avatar = Image.open(avatar_path + str(a) + str('_larger.png'),'r').convert('RGB')
#                             mask_im = Image.new("L", im_avatar.size, 0)
#                             draw = ImageDraw.Draw(mask_im)
#                             draw.ellipse((0, 0, 536, 536), fill=255)
#                             mask_im.save('mask_circle.jpg',quality=95)
#                             back_im.paste(im_avatar, (62, 502), mask_im)
#                             im_sm_avatar = Image.open(avatar_path + str(a) + str('_smaller.png'),'r').convert('RGB')
#                             mask_im_sm_avatar = Image.new("L", im_sm_avatar.size, 0)
#                             draw = ImageDraw.Draw(mask_im_sm_avatar)
#                             draw.ellipse((0, 0, 196, 196), fill=255)
#                             mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)
#                             back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)
#                             img = back_im
#                             draw = ImageDraw.Draw(img)
#                             font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
#                             font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
#                             y_text = 1284
#                             # Add descritpion
#                             # for line in description:
#                               # width, height = font_smallName.getsize(line)
#                             bbox = font_smallName.getbbox(description)
#                             width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
#                             draw.text((61, y_text), description, font=font_smallName, fill="#14161a")
#                               # y_text += height
#                             
#                             font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
#                             font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
#                             font_tweet = ImageFont.truetype("HelveticaNeue.ttc", 50)
#                             # wrapper = textwrap.TextWrapper(width=85, replace_whitespace=False)
#                             # Wrap the text
#                             print(tweet1)
#                             tweet1 =  textwrap.wrap(tweet1, width = 85)
#                             print(tweet1)
#                             tweet2 =  textwrap.wrap(tweet2, width = 85)
#                             tweet3 =  textwrap.wrap(tweet3, width = 85)
#                             # tweet = textwrap.TextWrapper(tweet_pro_fact_cashbail[0], width=85, replace_whitespace=False)
#                             y_text = 2070
#                             print(y_text)
#                             for line in tweet1:
#                               print(line)
#                               # width, height = font_tweet.getsize(line)
#                               bbox = font_tweet.getbbox(line)
#                               #print(bbox)
#                               width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
#                               draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
#                               y_text += height
#                               
#                             y_text += height
#                             
#                             for line in tweet2:
#                               print(line)
#                               # width, height = font_tweet.getsize(line)
#                               bbox = font_tweet.getbbox(line)
#                               #print(bbox)
#                               width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
#                               draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
#                               y_text += height
#                               
#                             y_text += height
#                             
#                             for line in tweet3:
#                               print(line)
#                               # width, height = font_tweet.getsize(line)
#                               bbox = font_tweet.getbbox(line)
#                               print(bbox)
#                               width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
#                               draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
#                               y_text += height
#                             
#                             feedback_num = [str(np.random.randint(700,900)),
#                               str(np.random.randint(10,13)),
#                               str(np.random.randint(600,900)),  
#                               str(np.random.randint(1500,2000)),
#                               str(np.random.randint(3000,6000)),
#                               str(np.random.randint(250,500)),
#                               str(np.random.randint(1000,1300)),
#                               str(np.random.randint(3000,6000))]
#                             draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)
#                             draw.text((529, 1582),feedback_num[1] + "K",(0,0,0), font = font_location)
#                             # draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = "#667786")
#                             # draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = "#667786")
#                             # draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = "#667786")
#                             draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = "#667786")
#                             draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = "#667786")
#                             draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = "#667786")
#                             # avatar = avatar.replace(".png", "")
#                             newsize = (480,612)
#                             img = img.resize(newsize)
#                             img_name = str(a) + "_" + str(t1) + "_" + str(t2) + "_" + str(p) + "_" + str(e) + "_" + str(pid) + "_" + str(ta) + "_" + str(c) + "_" + '.png'
#                             img_name = re.sub("[ ,]", "", img_name)
#                             img_name = re.sub("[ ]", "none", img_name)
#                             print(img_name)
#                             img.save(os.path.join(script_dir, "test_result", img_name), dpi=(300, 300))
# 

  
  
```

# Issue 1: Profile 1

```{python}


# Initialize counters for each loop
a_count = 1
for a in issue_1_p1_avatavars:
    t1_count = 1
    for t1 in treat_position:
        t2_count = 1
        for t2 in treat_format:
            p_count = 1
            for p in profession:
                e_count = 1
                for e in extremity:
                    pid_count = 1
                    for pid in partisanship:
                        ta_count = 1
                        for ta in tweets_about:
                            c_count = 1
                            for c in city:
                                if 'bm' in a:
                                    p_name = black_male_names[0]
                                    p_handle = str('@') + re.sub("[ ,]", "_", p_name)
                                    p_url = re.sub("[ ,]", "-", p_name) + str(".com")
                                if 'wm' in a:
                                    p_name = white_male_names[0]
                                    p_handle = str('@') + re.sub("[ ,]", "_", p_name)
                                    p_url = re.sub("[ ,]", "-", p_name) + str(".com")
                                if 'bf' in a:
                                    p_name = black_female_names[0]
                                    p_handle = str('@') + re.sub("[ ,]", "_", p_name)
                                    p_url = re.sub("[ ,]", "-", p_name) + str(".com")
                                if 'wf' in a:
                                    p_name = white_female_names[0]
                                    p_handle = str('@') + re.sub("[ ,]", "_", p_name)
                                    p_url = re.sub("[ ,]", "-", p_name) + str(".com")
                                
                                # Biography
                                description = str(p) + " | " + str(e) + str(pid) + " | Tweets about " + str(ta)
                                
                                 # ---- Pro Facts ----
                                if t1 == "pro" and t2 == "facts":
                                  tweet1 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1) &
                                    (cashbail_tweets_df['treatment'] == t2) &
                                    (cashbail_tweets_df['line'] == 1) &
                                    (cashbail_tweets_df['profile'] == 1),
                                    'filler'].iloc[0])
                                if t1 == "pro" and t2 == "facts":
                                    tweet2 = str(cashbail_tweets_df.loc[
                                      (cashbail_tweets_df['argument'] == t1) &
                                      (cashbail_tweets_df['treatment'] == t2) &
                                      (cashbail_tweets_df['line'] == 2) &
                                      (cashbail_tweets_df['profile'] == 1),
                                      'filler'].iloc[0])
                                if t1 == "pro" and t2 == "facts":
                                    tweet3 = str(cashbail_tweets_df.loc[
                                      (cashbail_tweets_df['argument'] == t1) &
                                      (cashbail_tweets_df['treatment'] == t2) &
                                      (cashbail_tweets_df['line'] == 3) &
                                      (cashbail_tweets_df['profile'] == 1),
                                    'filler'].iloc[0])
                                # ---- Pro Narrative ----
                                if t1 == "pro" and t2 == "narrative":
                                  tweet1 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1) &
                                    (cashbail_tweets_df['treatment'] == t2) &
                                    (cashbail_tweets_df['line'] == 1),
                                    'filler'].iloc[0])
                                if t1 == "pro" and t2 == "narrative":
                                  tweet2 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1) &
                                    (cashbail_tweets_df['treatment'] == t2) &
                                    (cashbail_tweets_df['line'] == 2),
                                    'filler'].iloc[0])
                                if t1 == "pro" and t2 == "narrative":
                                  tweet3 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1) &
                                    (cashbail_tweets_df['treatment'] == t2) &
                                    (cashbail_tweets_df['line'] == 3),
                                    'filler'].iloc[0])
                                # ---- Pro Both ----
                                if t1 == "pro" and t2 == "both":
                                  tweet1 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 ) &
                                    (cashbail_tweets_df['treatment'] == t2 ) &
                                    (cashbail_tweets_df['line'] == 1) ,
                                    'filler'].iloc[0])
                                if t1 == "pro" and t2 == "both":
                                  tweet2 = str(cashbail_tweets_df.loc[
                                   (cashbail_tweets_df['argument'] == t1 ) &
                                   (cashbail_tweets_df['treatment'] == t2 ) &
                                   (cashbail_tweets_df['line'] == 2) ,
                                    'filler'].iloc[0])
                                if t1 == "pro" and t2 == "both":
                                  tweet3 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 ) &
                                    (cashbail_tweets_df['treatment'] == t2 ) &
                                    (cashbail_tweets_df['line'] == 3) ,
                                    'filler'].iloc[0])
                                # ---- Con Facts ----
                                if t1 == "con" and t2 == "facts":
                                  tweet1 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 ) &
                                    (cashbail_tweets_df['treatment'] == t2 ) &
                                    (cashbail_tweets_df['line'] == 1) ,
                                    'filler'].iloc[0])
                                if t1 == "con" and t2 == "facts":
                                  tweet2 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 ) &
                                    (cashbail_tweets_df['treatment'] == t2 ) &
                                    (cashbail_tweets_df['line'] == 2) ,
                                    'filler'].iloc[0])
                                if t1 == "con" and t2 == "facts":
                                  tweet3 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 ) &
                                    (cashbail_tweets_df['treatment'] == t2 ) &
                                    (cashbail_tweets_df['line'] == 3) ,
                                    'filler'].iloc[0])
                                # ---- Con Narrative ----
                                if t1 == "con" and t2 == "narrative":
                                  tweet1 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 )&
                                    (cashbail_tweets_df['treatment'] == t2 )&
                                    (cashbail_tweets_df['line'] == 1),
                                    'filler'].iloc[0])
                                if t1 == "con" and t2 == "narrative":
                                  tweet2 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 ) &
                                    (cashbail_tweets_df['treatment'] == t2 ) &
                                    (cashbail_tweets_df['line'] == 2) ,
                                    'filler'].iloc[0])
                                if t1 == "con" and t2 == "narrative":
                                  tweet3 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 ) &
                                    (cashbail_tweets_df['treatment'] == t2 ) &
                                    (cashbail_tweets_df['line'] == 3) ,
                                    'filler'].iloc[0])
                                # ---- Con Both ----
                                if t1 == "con" and t2 == "both":
                                  tweet1 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 ) &
                                    (cashbail_tweets_df['treatment'] == t2 ) &
                                    (cashbail_tweets_df['line'] == 1) ,
                                    'filler'].iloc[0])
                                if t1 == "con" and t2 == "both":
                                  tweet2 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 ) &
                                    (cashbail_tweets_df['treatment'] == t2 ) &
                                    (cashbail_tweets_df['line'] == 2) ,
                                    'filler'].iloc[0])
                                if t1 == "con" and t2 == "both":
                                  tweet3 = str(cashbail_tweets_df.loc[
                                    (cashbail_tweets_df['argument'] == t1 ) &
                                    (cashbail_tweets_df['treatment'] == t2 ) &
                                    (cashbail_tweets_df['line'] == 3) ,
                                    'filler'].iloc[0])
                                # Fonts
                                font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index=1)
                                font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
                                font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index=1)
                                font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
                                font_tweet = ImageFont.truetype("HelveticaNeue.ttc", 50)

                                # Image Processing
                                img = Image.open('twitter_profile_clean_cwap_edit.png').convert('RGB')
                                draw = ImageDraw.Draw(img)
                                draw.text((61, 1079), p_name, (0, 0, 0), font=font_largeName)
                                draw.text((61, 1170), p_handle, font=font_smallName, fill="#667786")
                                draw.text((2000, 875), "Follow", font=font_largeName, fill="#1ca1f2")
                                back_im = img.copy()
                                avatar_path = os.path.join(script_dir, 'avatars', 'issue1',"profile1/")
                                im_avatar = Image.open(avatar_path + str(a) + str('_larger.png'),'r').convert('RGB')
                                mask_im = Image.new("L", im_avatar.size, 0)
                                draw = ImageDraw.Draw(mask_im)
                                draw.ellipse((0, 0, 536, 536), fill=255)
                                mask_im.save('mask_circle.jpg',quality=95)
                                back_im.paste(im_avatar, (62, 502), mask_im)
                                im_sm_avatar = Image.open(avatar_path + str(a) + str('_smaller.png'),'r').convert('RGB')
                                mask_im_sm_avatar = Image.new("L", im_sm_avatar.size, 0)
                                draw = ImageDraw.Draw(mask_im_sm_avatar)
                                draw.ellipse((0, 0, 196, 196), fill=255)
                                mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)
                                back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)
                                img = back_im
                                draw = ImageDraw.Draw(img)
                                draw.text((155, 1480), c, font=font_smallName, fill="#667786")
                                draw.text((646, 1480), p_url , font=font_smallName, fill = "#667786")
  
                                joined = "Joined " + str(random.choice(month)) + " " + str(random.choice(year))
                                draw.text((1411, 1480), joined, font=font_smallName, fill="#667786")
                                draw.text((295, 1987),p_name,(0,0,0), font=font_tweetName)

                                # Description
                                y_text = 1284
                                # Add descritpion
                                # for line in description:
                                # width, height = font_smallName.getsize(line)
                                bbox = font_smallName.getbbox(description)
                                width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
                                draw.text((61, y_text), description, font=font_smallName, fill="#14161a")
                                # Tweets
                                tweet1 =  textwrap.wrap(tweet1, width = 85)
                                tweet2 =  textwrap.wrap(tweet2, width = 85)
                                tweet3 =  textwrap.wrap(tweet3, width = 85)
                                y_text = 2070
                                # print(y_text)
                                for line in tweet1:
                                  # print(line)
                                  # width, height = font_tweet.getsize(line)
                                  bbox = font_tweet.getbbox(line)
                                  #print(bbox)
                                  width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
                                  draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
                                  y_text += height
                                  
                                y_text += height
                                
                                for line in tweet2:
                                  # print(line)
                                  # width, height = font_tweet.getsize(line)
                                  bbox = font_tweet.getbbox(line)
                                  #print(bbox)
                                  width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
                                  draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
                                  y_text += height
                                  
                                y_text += height
                                
                                for line in tweet3:
                                  # print(line)
                                  # width, height = font_tweet.getsize(line)
                                  bbox = font_tweet.getbbox(line)
                                  # print(bbox)
                                  width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
                                  draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
                                  y_text += height
                                
                                feedback_num = [str(np.random.randint(700,900)),
                                  str(np.random.randint(1000,2000)),
                                  str(np.random.randint(600,900)),  
                                  str(np.random.randint(1500,2000)),
                                  str(np.random.randint(3000,6000)),
                                  str(np.random.randint(250,500)),
                                  str(np.random.randint(500,1500)),
                                  str(np.random.randint(250,500))]
                                draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)
                                draw.text((500, 1582),feedback_num[1],(0,0,0), font = font_location)
                                # draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = "#667786")
                                # draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = "#667786")
                                # draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = "#667786")
                                draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = "#667786")
                                draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = "#667786")
                                draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = "#667786")
                                # avatar = avatar.replace(".png", "")
                                newsize = (480,612)
                                img_name = (
                                  str(a) + "_" + str(t1) + "_" + str(t2) + "_p" + str(p_count) + 
                                  "_e" + str(e_count) + "_pid" + str(pid_count) + "_ta" + 
                                  str(ta_count) + "_c" + str(c_count) + ".png"
                                  )
                                # "{a}_{t1}_{t2}_p{p_count}_e{e_count}_pid{pid_count}_ta{ta_count}_c{c_count}.png"
                                # img_name = re.sub("[ ,]", "", img_name)
                                img.save(os.path.join(script_dir, "test_result", "study1", "profile1", img_name), dpi=(300, 300)) 
                                # Increment inner counters
                                c_count += 1
                            ta_count += 1
                        pid_count += 1
                    e_count += 1
                p_count += 1
            t2_count += 1
        t1_count += 1
    a_count += 1
    

```


# Generate Black Women Profiles

```{python}


tweet1 = cashbail_tweets_df.loc[
            (cashbail_tweets_df['argument'] == t1) &
            (cashbail_tweets_df['treatment'] == t2) &
            (cashbail_tweets_df['line'] == 1) &
            (cashbail_tweets_df['profile'] == 1),
            'filler']

```


```{python}
print(t1)
print(cashbail_tweets_df.loc['argument' == "pro"])

tweet1 = str(cashbail_tweets_df.loc[
    (cashbail_tweets_df['argument'] == t1) &
    (cashbail_tweets_df['treatment'] == t2) &
    (cashbail_tweets_df['line'] == 1) &
    (cashbail_tweets_df['profile'] == 1),
    'filler'
].iloc[0])
tweet1
```



```{python}
#Generating empty Twitter profile, man
img = Image.open('Twitter_profile_clean.png').convert('RGB')
draw = ImageDraw.Draw(img)
font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
draw.text((61, 1079),"Congressman Smith",(0,0,0),font=font_largeName)
font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
draw.text((61, 1170),"@CongressmanSmith",font=font_smallName, fill = "#667786")
draw.text((2000, 875),"Follow",font=font_largeName, fill = "#1ca1f2")
font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
draw.text((155, 1480),"Washington, DC",font=font_smallName, fill = "#667786")
draw.text((646, 1480),"www.congress.gov",font=font_smallName, fill = "#667786")
draw.text((1411, 1480),"Joined November 2010",font=font_smallName, fill = "#667786")
font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
draw.text((295, 1987),"Congressman Smith",(0,0,0), font=font_tweetName)
draw.text((295, 2380),"Congressman Smith",(0,0,0), font=font_tweetName)
img.save(os.path.join(script_dir, "TwitterProfileClean_man.png"), dpi=(300, 300))
```

```{python}
#Generating empty Twitter profile, woman
img = Image.open('Twitter_profile_clean.png').convert('RGB')
draw = ImageDraw.Draw(img)
font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
draw.text((61, 1079),"Congresswoman Smith",(0,0,0),font=font_largeName)
font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
draw.text((61, 1170),"@CongresswomanSmith",font=font_smallName, fill = "#667786")
draw.text((2000, 875),"Follow",font=font_largeName, fill = "#1ca1f2")
font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
draw.text((155, 1480),"Washington, DC",font=font_smallName, fill = "#667786")
draw.text((646, 1480),"www.congress.gov",font=font_smallName, fill = "#667786")
draw.text((1411, 1480),"Joined November 2010",font=font_smallName, fill = "#667786")
font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
draw.text((295, 1987),"Congresswoman Smith",(0,0,0), font=font_tweetName)
draw.text((295, 2380),"Congresswoman Smith",(0,0,0), font=font_tweetName)
img.save(os.path.join(script_dir, "TwitterProfileClean_woman.png"), dpi=(300, 300))
```

```{python}
# Create a test profile for a black woman

generation = "boomer"
religion = "Catholic"
education = "JD"
military = " "
# profession = "researcher"
feedback = "high"
avatar = "p1_larger.png"
im_bg = Image.open(os.path.join(script_dir, 'TwitterProfileClean_woman.png')).convert('RGB')
im_avatar = Image.open(os.path.join(script_dir, 'avatars', 'woman',"black" ,"p1", 'p1_larger.png'),'r').convert('RGB')
mask_im = Image.new("L", im_avatar.size, 0)
draw = ImageDraw.Draw(mask_im)
draw.ellipse((0, 0, 536, 536), fill=255)
mask_im.save('mask_circle.jpg',quality=95)
back_im = im_bg.copy()
back_im.paste(im_avatar, (62, 502), mask_im)
im_top = Image.open(os.path.join(script_dir, 'TopImage', 'elephant.png')).convert('RGB')
mask_im_top = Image.new("L", im_top.size, 0)
draw = ImageDraw.Draw(mask_im_top)
draw.rectangle((0, 0, 2402, 802), fill=255)
draw.ellipse((50, 486, 615, 1055), fill=0)
mask_im_top.save('mask_background.jpg', quality=95)
back_im.paste(im_top, (0,0), mask_im_top)
im_sm_avatar = Image.open(os.path.join(script_dir, 'avatars', 'woman',"black" ,"p1", 'p1_smaller.png'),'r').convert('RGB')
mask_im_sm_avatar = Image.new("L", im_sm_avatar.size, 0)
draw = ImageDraw.Draw(mask_im_sm_avatar)
draw.ellipse((0, 0, 196, 196), fill=255)
mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)
back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)
back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)
img = back_im
draw = ImageDraw.Draw(img)
font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
if generation == 'boomer':
    year = str(np.random.randint(1940,1975))
else:
    year = str(np.random.randint(1976,1990))
description = textwrap.wrap("I'm a Republican candidate for the House of Representatives. Born in " + year + ", I'm " + religion + "a " + education + military + "and currently I am " + profession + ".", width=92)
y_text = 1284
for line in description:
    # width, height = font_smallName.getsize(line)
    bbox = font_smallName.getbbox(line)
    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
    draw.text((61, y_text), line, font=font_smallName, fill="#14161a")
    y_text += height
font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
font_tweet = ImageFont.truetype("HelveticaNeue.ttc", 50)
tweet = textwrap.wrap(tweets_rep_local[0], width=85)
y_text = 2070
for line in tweet:
    # width, height = font_tweet.getsize(line)
    bbox = font_tweet.getbbox(line)
    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
    draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
    y_text += height
tweet2 = textwrap.wrap(tweets_rep_local[1], width=85)
y_text_2 = 2465
for line in tweet2:
    # width, height = font_tweet.getsize(line)
    bbox = font_tweet.getbbox(line)
    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
    draw.text((295, y_text_2), line, font=font_smallName, fill="#14161a")
    y_text_2 += height
if feedback == 'high':
       feedback_num = [str(np.random.randint(700,900)),
                       str(np.random.randint(10,13)),
                       str(np.random.randint(600,900)),
                       str(np.random.randint(1500,2000)),
                       str(np.random.randint(3000,6000)),
                       str(np.random.randint(250,500)),
                       str(np.random.randint(1000,1300)),
                       str(np.random.randint(3000,6000))]
else:
       feedback_num = [str(np.random.randint(200,400)),
                       str(np.random.randint(2,5)),
                       str(np.random.randint(200,400)),
                       str(np.random.randint(500,1000)),
                       str(np.random.randint(100,800)),
                       str(np.random.randint(100,250)),
                       str(np.random.randint(300,600)),
                       str(np.random.randint(100,800))]
draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)
draw.text((529, 1582),feedback_num[1] + "K",(0,0,0), font = font_location)
draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = "#667786")
draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = "#667786")
draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = "#667786")
draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = "#667786")
draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = "#667786")
draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = "#667786")   
avatar = avatar.replace(".png", "")
newsize = (480,612)
img = img.resize(newsize)
img_name = str(avatar) + "_republican_" + str(generation) + "_" + str(feedback) + "_" + str(military) + "_" + str(education) + "_" + str(profession) + "_" + str(religion) + '.png'
img_name = re.sub("[ ,]", "", img_name)
img.save(os.path.join(script_dir, "test_result", img_name), dpi=(300, 300))


```


The following cells will create the conjoint Twitter profiles according to the features established above. Output will be written in the used directory, in a new folder named "results". 

```{python}
#Generating output folder
# os.mkdir(script_dir, "results")

results_dir = os.path.join(script_dir, "results")

# Create the directory
os.mkdir(results_dir)
```

```{python}
#Generating Conjoint Twitter Profiles, Republican Man
for avatar in avatars_man: 
    for religion in Religion:
        for profession in Profession:
            for education in Education:
                for military in Military:
                    for generation in Generations:  
                            for feedback in Feedback:
                                im_bg = Image.open(os.path.join(script_dir, 'TwitterProfileClean_man.png')).convert('RGB')
                                im_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Man', avatar, 'larger.jpg'),'r').convert('RGB')
                                mask_im = Image.new("L", im_avatar.size, 0)
                                draw = ImageDraw.Draw(mask_im)
                                draw.ellipse((0, 0, 536, 536), fill=255)
                                mask_im.save('mask_circle.jpg',quality=95)
                                back_im = im_bg.copy()
                                back_im.paste(im_avatar, (62, 502), mask_im)
                                im_top = Image.open(os.path.join(script_dir, 'TopImage', 'elephant.png')).convert('RGB')
                                mask_im_top = Image.new("L", im_top.size, 0)
                                draw = ImageDraw.Draw(mask_im_top)
                                draw.rectangle((0, 0, 2402, 802), fill=255)
                                draw.ellipse((50, 486, 615, 1055), fill=0)
                                mask_im_top.save('mask_background.jpg', quality=95)
                                back_im.paste(im_top, (0,0), mask_im_top)
                                im_sm_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Man', avatar, 'smaller.jpg'),'r').convert('RGB')
                                mask_im_sm_avatar = Image.new("L", im_sm_avatar.size, 0)
                                draw = ImageDraw.Draw(mask_im_sm_avatar)
                                draw.ellipse((0, 0, 196, 196), fill=255)
                                mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)
                                back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)
                                back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)
                                img = back_im
                                draw = ImageDraw.Draw(img)
                                font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
                                font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
                                if generation == 'boomer':
                                    year = str(np.random.randint(1940,1975))
                                else:
                                    year = str(np.random.randint(1976,1990))
                                description = textwrap.wrap("I'm a Republican candidate for the House of Representatives. Born in " + year + ", I'm " + religion + "a " + education + military + "and currently I am " + profession + ".", width=92)
                                y_text = 1284
                                for line in description:
                                    # width, height = font_smallName.getsize(line)
                                    bbox = font_smallName.getbbox(line)
                                    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
                                    draw.text((61, y_text), line, font=font_smallName, fill="#14161a")
                                    y_text += height
                                font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
                                font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
                                font_tweet = ImageFont.truetype("HelveticaNeue.ttc", 50)
                                tweet = textwrap.wrap(tweets_rep_local[0], width=85)
                                y_text = 2070
                                for line in tweet:
                                    # width, height = font_tweet.getsize(line)
                                    bbox = font_tweet.getbbox(line)
                                    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
                                    draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
                                    y_text += height
                                tweet2 = textwrap.wrap(tweets_rep_local[1], width=85)
                                y_text_2 = 2465
                                for line in tweet2:
                                    # width, height = font_tweet.getsize(line)
                                    bbox = font_tweet.getbbox(line)
                                    width, height = bbox[2] - bbox[0], bbox[3] - bbox[1]
                                    draw.text((295, y_text_2), line, font=font_smallName, fill="#14161a")
                                    y_text_2 += height
                                if feedback == 'high':
                                       feedback_num = [str(np.random.randint(700,900)),
                                                       str(np.random.randint(10,13)),
                                                       str(np.random.randint(600,900)),
                                                       str(np.random.randint(1500,2000)),
                                                       str(np.random.randint(3000,6000)),
                                                       str(np.random.randint(250,500)),
                                                       str(np.random.randint(1000,1300)),
                                                       str(np.random.randint(3000,6000))]
                                else:
                                       feedback_num = [str(np.random.randint(200,400)),
                                                       str(np.random.randint(2,5)),
                                                       str(np.random.randint(200,400)),
                                                       str(np.random.randint(500,1000)),
                                                       str(np.random.randint(100,800)),
                                                       str(np.random.randint(100,250)),
                                                       str(np.random.randint(300,600)),
                                                       str(np.random.randint(100,800))]
                                draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)
                                draw.text((529, 1582),feedback_num[1] + "K",(0,0,0), font = font_location)
                                draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = "#667786")
                                draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = "#667786")
                                draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = "#667786")
                                draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = "#667786")
                                draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = "#667786")
                                draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = "#667786")   
                                avatar = avatar.replace(".png", "")
                                newsize = (480,612)
                                img = img.resize(newsize)
                                img_name = str(avatar) + "_republican_" + str(generation) + "_" + str(feedback) + "_" + str(military) + "_" + str(education) + "_" + str(profession) + "_" + str(religion) + '.png'
                                img_name = re.sub("[ ,]", "", img_name)
                                img.save(os.path.join(script_dir, "results", img_name), dpi=(300, 300))
```

```{python}
#Generating Conjoint Twitter Profiles, Republican Woman
for avatar in avatars_woman: 
    for religion in Religion:
        for profession in Profession:
            for education in Education:
                for military in Military:
                    for generation in Generations:  
                            for feedback in Feedback:
                                im_bg = Image.open(os.path.join(script_dir,'TwitterProfileClean_woman.png')).convert('RGB')
                                im_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Woman', avatar, 'larger.png'),'r').convert('RGB')
                                mask_im = Image.new("L", im_avatar.size, 0)
                                draw = ImageDraw.Draw(mask_im)
                                draw.ellipse((0, 0, 536, 536), fill=255)
                                mask_im.save('mask_circle.jpg', quality=95)
                                back_im = im_bg.copy()
                                back_im.paste(im_avatar, (62, 502), mask_im)
                                im_top = Image.open(os.path.join(script_dir, 'TopImage', "elephant.png")).convert('RGB')
                                mask_im_top = Image.new("L", im_top.size, 0)
                                draw = ImageDraw.Draw(mask_im_top)
                                draw.rectangle((0, 0, 2402, 802), fill=255)
                                draw.ellipse((50, 486, 615, 1055), fill=0)
                                mask_im_top.save('mask_background.jpg', quality=95)
                                back_im.paste(im_top, (0,0), mask_im_top)
                                im_sm_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Woman', avatar, 'smaller.png'),'r').convert('RGB')
                                mask_im_sm_avatar = Image.new("L", im_sm_avatar.size, 0)
                                draw = ImageDraw.Draw(mask_im_sm_avatar)
                                draw.ellipse((0, 0, 196, 196), fill=255)
                                mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)
                                back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)
                                back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)
                                img = back_im
                                draw = ImageDraw.Draw(img)
                                font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
                                font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
                                if generation == 'boomer':
                                    year = str(np.random.randint(1940,1975))
                                else:
                                    year = str(np.random.randint(1976,1990))
                                description = textwrap.wrap("I'm a Republican candidate for the House of Representatives. Born in " + year + ", I'm " + religion + "a " + education + military + "and currently I am " + profession + ".", width=92)
                                y_text = 1284
                                for line in description:
                                    width, height = font_smallName.getsize(line)
                                    draw.text((61, y_text), line, font=font_smallName, fill="#14161a")
                                    y_text += height
                                font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
                                font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
                                font_tweet = ImageFont.truetype("HelveticaNeue.ttc", 50)
                                tweet = textwrap.wrap(tweets_rep_local[0], width=85)
                                y_text = 2070
                                for line in tweet:
                                    width, height = font_tweet.getsize(line)
                                    draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
                                    y_text += height
                                tweet2 = textwrap.wrap(tweets_rep_local[1], width=85)
                                y_text_2 = 2465
                                for line in tweet2:
                                    width, height = font_tweet.getsize(line)
                                    draw.text((295, y_text_2), line, font=font_smallName, fill="#14161a")
                                    y_text_2 += height
                                if feedback == 'high':
                                       feedback_num = [str(np.random.randint(700,900)),
                                                       str(np.random.randint(10,13)),
                                                       str(np.random.randint(600,900)),
                                                       str(np.random.randint(1500,2000)),
                                                       str(np.random.randint(3000,6000)),
                                                       str(np.random.randint(250,500)),
                                                       str(np.random.randint(1000,1300)),
                                                       str(np.random.randint(3000,6000))]
                                else:
                                       feedback_num = [str(np.random.randint(200,400)),
                                                       str(np.random.randint(2,5)),
                                                       str(np.random.randint(200,400)),
                                                       str(np.random.randint(500,1000)),
                                                       str(np.random.randint(100,800)),
                                                       str(np.random.randint(100,250)),
                                                       str(np.random.randint(300,600)),
                                                       str(np.random.randint(100,800))]
                                draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)
                                draw.text((529, 1582),feedback_num[1] + "K",(0,0,0), font = font_location)
                                draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = "#667786")
                                draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = "#667786")
                                draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = "#667786")
                                draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = "#667786")
                                draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = "#667786")
                                draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = "#667786")   
                                avatar = avatar.replace(".png", "")
                                newsize = (480,612)
                                img = img.resize(newsize)
                                img_name = str(avatar) + "_republican_" + str(generation) + "_" + str(feedback) + "_" + str(military) + "_" + str(education) + "_" + str(profession) + "_" + str(religion) + '.png'
                                img_name = re.sub("[ ,]", "", img_name)
                                img.save(os.path.join(script_dir, "results", img_name), dpi=(300, 300))
```

```{python}
#Generating Conjoint Twitter Profiles, Democrat Man
for avatar in avatars_man: 
    for religion in Religion:
        for profession in Profession:
            for education in Education:
                for military in Military:
                    for generation in Generations:  
                            for feedback in Feedback:
                                im_bg = Image.open(os.path.join(script_dir,'TwitterProfileClean_man.png')).convert('RGB')
                                im_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Man', avatar, 'larger.png'),'r').convert('RGB')
                                mask_im = Image.new("L", im_avatar.size, 0)
                                draw = ImageDraw.Draw(mask_im)
                                draw.ellipse((0, 0, 536, 536), fill=255)
                                mask_im.save('mask_circle.jpg', quality=95)
                                back_im = im_bg.copy()
                                back_im.paste(im_avatar, (62, 502), mask_im)
                                im_top = Image.open(os.path.join(script_dir, 'TopImage', "donkey.png")).convert('RGB')
                                mask_im_top = Image.new("L", im_top.size, 0)
                                draw = ImageDraw.Draw(mask_im_top)
                                draw.rectangle((0, 0, 2402, 802), fill=255)
                                draw.ellipse((50, 486, 615, 1055), fill=0)
                                mask_im_top.save('mask_background.jpg', quality=95)
                                back_im.paste(im_top, (0,0), mask_im_top)
                                im_sm_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Man', avatar, 'smaller.png'),'r').convert('RGB')
                                mask_im_sm_avatar = Image.new("L", im_sm_avatar.size, 0)
                                draw = ImageDraw.Draw(mask_im_sm_avatar)
                                draw.ellipse((0, 0, 196, 196), fill=255)
                                mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)
                                back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)
                                back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)
                                img = back_im
                                draw = ImageDraw.Draw(img)
                                font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
                                font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
                                if generation == 'boomer':
                                    year = str(np.random.randint(1940,1975))
                                else:
                                    year = str(np.random.randint(1976,1990))
                                description = textwrap.wrap("I'm a Democratic candidate for the House of Representatives. Born in " + year + ", I'm " + religion + "a " + education + military + "and currently I am " + profession + ".", width=92)
                                y_text = 1284
                                for line in description:
                                    width, height = font_smallName.getsize(line)
                                    draw.text((61, y_text), line, font=font_smallName, fill="#14161a")
                                    y_text += height
                                font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
                                font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
                                font_tweet = ImageFont.truetype("HelveticaNeue.ttc", 50)
                                tweet = textwrap.wrap(tweets_dem_local[0], width=85)
                                y_text = 2070
                                for line in tweet:
                                    width, height = font_tweet.getsize(line)
                                    draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
                                    y_text += height
                                tweet2 = textwrap.wrap(tweets_dem_local[1], width=85)
                                y_text_2 = 2465
                                for line in tweet2:
                                    width, height = font_tweet.getsize(line)
                                    draw.text((295, y_text_2), line, font=font_smallName, fill="#14161a")
                                    y_text_2 += height
                                if feedback == 'high':
                                       feedback_num = [str(np.random.randint(700,900)),
                                                       str(np.random.randint(10,13)),
                                                       str(np.random.randint(600,900)),
                                                       str(np.random.randint(1500,2000)),
                                                       str(np.random.randint(3000,6000)),
                                                       str(np.random.randint(250,500)),
                                                       str(np.random.randint(1000,1300)),
                                                       str(np.random.randint(3000,6000))]
                                else:
                                       feedback_num = [str(np.random.randint(200,400)),
                                                       str(np.random.randint(2,5)),
                                                       str(np.random.randint(200,400)),
                                                       str(np.random.randint(500,1000)),
                                                       str(np.random.randint(100,800)),
                                                       str(np.random.randint(100,250)),
                                                       str(np.random.randint(300,600)),
                                                       str(np.random.randint(100,800))]
                                draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)
                                draw.text((529, 1582),feedback_num[1] + "K",(0,0,0), font = font_location)
                                draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = "#667786")
                                draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = "#667786")
                                draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = "#667786")
                                draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = "#667786")
                                draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = "#667786")
                                draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = "#667786")   
                                avatar = avatar.replace(".png", "")
                                newsize = (480,612)
                                img = img.resize(newsize)
                                img_name = str(avatar) + "_democrat_" + str(generation) + "_" + str(feedback) + "_" + str(military) + "_" + str(education) + "_" + str(profession) + "_" + str(religion) + '.png'
                                img_name = re.sub("[ ,]", "", img_name)
                                img.save(os.path.join(script_dir, "results", img_name), dpi=(300, 300))
```

```{python}
#Generating Conjoint Twitter Profiles, Democrat Woman
for avatar in avatars_woman: 
    for religion in Religion:
        for profession in Profession:
            for education in Education:
                for military in Military:
                    for generation in Generations:  
                            for feedback in Feedback:
                                im_bg = Image.open(os.path.join(script_dir,'TwitterProfileClean_woman.png')).convert('RGB')
                                im_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Woman', avatar, 'larger.png'),'r').convert('RGB')
                                mask_im = Image.new("L", im_avatar.size, 0)
                                draw = ImageDraw.Draw(mask_im)
                                draw.ellipse((0, 0, 536, 536), fill=255)
                                mask_im.save('mask_circle.jpg', quality=95)
                                back_im = im_bg.copy()
                                back_im.paste(im_avatar, (62, 502), mask_im)
                                im_top = Image.open(os.path.join(script_dir, 'TopImage', "donkey.png")).convert('RGB')
                                mask_im_top = Image.new("L", im_top.size, 0)
                                draw = ImageDraw.Draw(mask_im_top)
                                draw.rectangle((0, 0, 2402, 802), fill=255)
                                draw.ellipse((50, 486, 615, 1055), fill=0)
                                mask_im_top.save('mask_background.jpg', quality=95)
                                back_im.paste(im_top, (0,0), mask_im_top)
                                im_sm_avatar = Image.open(os.path.join(script_dir, 'Avatars', 'Woman', avatar, 'smaller.png'),'r').convert('RGB')
                                mask_im_sm_avatar = Image.new("L", im_sm_avatar.size, 0)
                                draw = ImageDraw.Draw(mask_im_sm_avatar)
                                draw.ellipse((0, 0, 196, 196), fill=255)
                                mask_im_sm_avatar.save('mask_circle_smaller.jpg', quality=95)
                                back_im.paste(im_sm_avatar, (65, 1970), mask_im_sm_avatar)
                                back_im.paste(im_sm_avatar, (65, 2380), mask_im_sm_avatar)
                                img = back_im
                                draw = ImageDraw.Draw(img)
                                font_largeName = ImageFont.truetype("HelveticaNeue.ttc", size=72, index = 1)
                                font_smallName = ImageFont.truetype("HelveticaNeue.ttc", 50)
                                if generation == 'boomer':
                                    year = str(np.random.randint(1940,1975))
                                else:
                                    year = str(np.random.randint(1976,1990))
                                description = textwrap.wrap("I'm a Democratic candidate for the House of Representatives. Born in " + year + ", I'm " + religion + "a " + education + military + "and currently I am " + profession + ".", width=92)
                                y_text = 1284
                                for line in description:
                                    width, height = font_smallName.getsize(line)
                                    draw.text((61, y_text), line, font=font_smallName, fill="#14161a")
                                    y_text += height
                                font_location = ImageFont.truetype("HelveticaNeue.ttc", 60, index = 1)
                                font_tweetName = ImageFont.truetype("HelveticaNeue.ttc", 50, index = 1)
                                font_tweet = ImageFont.truetype("HelveticaNeue.ttc", 50)
                                tweet = textwrap.wrap(tweets_dem_local[0], width=85)
                                y_text = 2070
                                for line in tweet:
                                    width, height = font_tweet.getsize(line)
                                    draw.text((295, y_text), line, font=font_smallName, fill="#14161a")
                                    y_text += height
                                tweet2 = textwrap.wrap(tweets_dem_local[1], width=85)
                                y_text_2 = 2465
                                for line in tweet2:
                                    width, height = font_tweet.getsize(line)
                                    draw.text((295, y_text_2), line, font=font_smallName, fill="#14161a")
                                    y_text_2 += height
                                if feedback == 'high':
                                       feedback_num = [str(np.random.randint(700,900)),
                                                       str(np.random.randint(10,13)),
                                                       str(np.random.randint(600,900)),
                                                       str(np.random.randint(1500,2000)),
                                                       str(np.random.randint(3000,6000)),
                                                       str(np.random.randint(250,500)),
                                                       str(np.random.randint(1000,1300)),
                                                       str(np.random.randint(3000,6000))]
                                else:
                                       feedback_num = [str(np.random.randint(200,400)),
                                                       str(np.random.randint(2,5)),
                                                       str(np.random.randint(200,400)),
                                                       str(np.random.randint(500,1000)),
                                                       str(np.random.randint(100,800)),
                                                       str(np.random.randint(100,250)),
                                                       str(np.random.randint(300,600)),
                                                       str(np.random.randint(100,800))]
                                draw.text((61, 1582), feedback_num[0],(0,0,0),font = font_location)
                                draw.text((529, 1582),feedback_num[1] + "K",(0,0,0), font = font_location)
                                draw.text((386, 2218),feedback_num[2],font=font_smallName, fill = "#667786")
                                draw.text((790, 2218),feedback_num[3],font=font_smallName, fill = "#667786")
                                draw.text((1201, 2218),feedback_num[4],font=font_smallName, fill = "#667786")
                                draw.text((386, 2661),feedback_num[5],font=font_smallName, fill = "#667786")
                                draw.text((790, 2661),feedback_num[6],font=font_smallName, fill = "#667786")
                                draw.text((1201, 2661),feedback_num[7],font=font_smallName, fill = "#667786")   
                                avatar = avatar.replace(".png", "")
                                newsize = (480,612)
                                img = img.resize(newsize)
                                img_name = str(avatar) + "_democrat_" + str(generation) + "_" + str(feedback) + "_" + str(military) + "_" + str(education) + "_" + str(profession) + "_" + str(religion) + '.png'
                                img_name = re.sub("[ ,]", "", img_name)
                                img.save(os.path.join(script_dir,"results", img_name), dpi=(300, 300))
```

Citation for this script should go to Alessandro Vecchiato (2021), "Replication Material of Introducing Visual Conjoint Experiments." For information and comments contacts can be found at avecc.people.stanford.edu.

```{python}

```

